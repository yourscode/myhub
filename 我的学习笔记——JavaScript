JavaScript书写格式
  1、行内样式：写在标签内部。
  2、内嵌样式（内联样式）：写在一对head标签中。
  3、外链样式：写在一个单独的.js文件中，再导入进来。

JavaScript书写格式注意点：
  1、不推荐直接将JavaScript代码书写到标签内部
  2、默认情况浏览器会从上至下解析网页，所以如果JavaScript代码写到一对head标签中，
  并且需要通过JavaScript代码操作界面上的元素，那么就不能直接书写JavaScript代码，否则无效
  2.1如果想将JavaScript代码写到一对head标签中，并且需要在JavaScript代码中操作界面上的元素，
  那么必须加上window.onload=function(){操作界面元素的JavaScript代码}
  2.2window.onload的含义：等到界面上所有的元素都加载完毕后再执行{}中的代码
  2.3由于默认情况下浏览器会从上至下解析网页，所以如果想通过JavaScript操作界面上的元素只需要等到元素被加载解析之后操作就可以了，
  所以我们还可以将JavaScript代码写到body结束标签的前面。
  2.4如果需要在一对script标签中编写JavaScript代码，那么就不能通过script标签再导入其他的文件否者书写的JavaScript代码无效
  
  JavaScript常见输出方式：
    1、通过弹窗的形式来输出
      alert（需要输出的内容）；
      confirm（需要输出的内容）；
      prompt（需要输出的内容）；
    注意点：
      如果需要输出内容不是数字，那么就必须通过单引号或者双引号括起来
      在JavaScript中时严格区分大小写的，alert（）和ALERT（）不是一回事
      在编写JavaScript代码的时候一定要记住每一句代码后面都要添加一个分号，并且这个分号是英文分号
      我们会发现有时候不写分号程序也能运行，这里并不是因为不需要分号，而是浏览器自动帮助我们添加了分号
      浏览器自动添加会消耗一定的性能，并且有可能会添加错误
    2、通过网页内容区域的形式来输出
      document.write(需要输出的内容)；
    注意点：如果需要输出的内容不是数字，那么就必须通过单引号或者双引号括起来
    3、通过开发者控制台的形式来输出
       console.log(需要输出的内容);     普通输出
       console.warn(需要输出的内容)；    警告输出
       console.error(需要输出的内容)；    错误输出
     注意点：
       如果需要输出的内容不是数字，那么就必须通过单引号或者双引号括起来
       
     什么是常量？
       常量表示一些固定不变的数据
       现实生活中人的性别其实就可以看作是常量，生下来是男孩一辈子都是男孩，生下来是女孩一辈子都是女孩
       JavaScript中常量的分类
         1、整型常量   其实就是正数。在JavaScript中随便写一个整数都是整型常量   1   /    666/   99
         2、实型常量    实型常量其实就是小数，在JavaScript中随便写一个小数都是实型常量    3.14/6.66
         3、字符串常量   字符串常量其实就是用单引号或者双引号括起来的内容，我们就称之为字符串常量   'a'  /   'abc'   /    "巴啦啦能量"
           注意点：无论是用单引号或者双引号括起来多少个字符，在JavaScript中都是字符串常量
         4、布尔常量     布尔常量其实就是真或者假，在JavaScript中通过true和false来表达，在JavaScript中布尔常量只有两个取值，真（true）或者假（false）
         5、自定义常量   在ES6新增的，const 常量名称=常量值;    const NUM=666;
         
注意点：在JavaScript中变量是可以相互赋值的，
        在JavaScript中如果定义了同名变量那么后面定义的变量会覆盖先定义的变量
        在老版本的标准的（ES6之前）Javascript中可以先使用变量，再定义变量，并不会报错
        由于JavaScript是一门解释型语言，会边解析边执行，浏览器在解析JavaScript代码之前还会
        进行一个操作“预解析（预处理）”
        预解析（预处理）步骤：将当前JavaScript代码中所有的变量的定义放到所有代码最前面
        例如：console.log(num);
              var num =123;
              预处理后：
              var = num;
              console.log(num);
              num = 123;
              
什么是关键字？
  被JavaScript语言赋予了特殊含义的单词
  关键字在开发工具中会显示特殊的颜色的
  关键字不能用做变量名称、函数名等
  关键字严格区分大小写，var和Var前者是关键字后者不是（只需要记住一点，在JavaScript中关键字都是小写的哦）
什么是保留字?
  javascript预留的关键字他们虽然现在不是关键字，但以后升级版本可能会作为关键字使用
  
  标识符明明规则（必须遵守）
    只能由26个英文字母大小写、10个阿拉伯数字0~9；下划线——；美元符号$；组成
    不能以数字开头
    严格区分大小写，比如test和Test是两个不同的标识符
    不可以使用关键字和保留字作为标识符
    JS底层保存的标识符时实际上是采用Unicode编码的 ，所以理论上讲所有的utf-8中含有的内容都可以作为标识符  例如：哈哈哈_text  就是合法的！
    标识符命名规范（建议遵守）
      见名知意：变量的名称要有意义（有利于提高可读性）
      驼峰命名法：首字母小写，从第二个单词开始首字母大写（有利于提高可读性）
      
**注意：    多行注释不能嵌套多注释


基本数据类型
  NUmber 数据类型
    在JavaScript中无论是整数还是小数都是属于数值类型的
  String 字符串类型
    在JavaScript中无论是通过单引号还是双引号括起来的内容都是属于字符串类型
  boolean 布尔类型
    在JavaScript中布尔类型比较特殊，只有两个取值true/false；
  Undefined 未定义类型
    在JavaScript中未定定义类型比较特殊，只有一个取值undefined
  Null 空类型
  引用数据类型
    object 对象类型
    
这次学习的数据类型和前面学习的常量之间的关系就是猫科动物和狮子老虎豹子之间的关系
今天学习的数据类型就是猫科动物，前面学习的常量就是狮子老虎豹子

将Number数据类型转换为字符串类型
将Boolean数据类型转换为字符串类型
将undefined数据类型转换为字符串类型
将null类型转换为字符串类型
在JavaScript中如果想将以上的四种数据类型转换为字符串类型常用的方法有三种
1、对于Number数据类型和Boolean类型来说，可以通过  变量名称.toString()   的方式来转换
2、可以通过  String（变量or常量）;   转换为字符串；
3、还可以通过   变量或者常量+""/变量或者常量+''    转换为字符串（+''或者+""  其本质就是调用String（）函数；
  在谷歌浏览器的控制台中如果是Number类型是蓝色的
  在谷歌浏览器的控制台中如果是String类型是灰色的 
  注意点：变量名称.toString();  是对拷贝的数据进行转换，所以不会影响到原有的数据
          不能使用常量直接调用toString方法，因为常量是不能改变的
  let value = undefined;
  let value1 = String(value);   代码的含义：根据传入的数据重新生成一个新的字符串 
  注意点：  变量名称.toString();   的方式前面不能是常量因为常量不能被改变
            String（变量or常量）   是根据传入的值重新生成一个新的值并不似修改原有的值

在JavaScript中如果想将以上四种基本数据类型转换为数值类型常用的方法有三种
  1、通过   Number（常量/变量）;      方式来转换
  2、还可以通过数学运算中的  +/-   号来转换  （虽然通过+/-都可以将其他类型转换为数值类型，但是  -  会改变数值的正负性 +/-   本质上就是调用了Number函数）
  3、使用parseInt（需要转换的字符串）/parseFloat（需要转换的字符串）    注意点：parseInt（）/parseFloat（）都会从左至右提取数值，一旦遇到非数值就会立即停止
  停止；停止的时候如果还没有 提取到数值，那么就返回NaN；parseInt（）/parseFloat（）都会将传入的数据当作字符串来处理
  
将String类型准换为数值类型
  -如果字符串中全是数值，那么久正常转换
  -如果字符串是一个空串""/"    "，那么转换之后是0；
  -如果字符串中不仅仅是数字，那么转换之后是NaN；
将Boolean类型准换为数值类型
  -true转换之后是1
  -false转换之后是0
将undefined类型转换为数值类型
  -转换之后是NaN
将null类型转换为数值类型
  -转换之后是0
空字符串/false/null转换之后都是0；
字符串不仅仅是数字/undefined转换之后是NaN
其他的是正常转换

转换为布尔类型
  在 JavaScript中如果想将基本数据类型转换为布尔类型，那么只需要调用Boolean(常量or变量)
  1、将String类型转换为布尔类型
    只要字符串中有内容都会转换为true（空格也算内容的），只要字符串中没有内容才会转换成false
  2、将Number类型转换为布尔类型
    只有数值是0才会转换为false，其他的都会转换为true
注意：NaN也是数值类型，在JavaScript中，
     如果是NaN的话也会转换为false
   3、将undefined类型转换为布尔类型
     undefined会转换为false
   4、将null类型转换为布尔类型
     null会转换为false
     
 总结：空字符串/0/NaN/undefined/null   会转换为false其他的都是转换为true

什么是算数运算符？
  +    -    *    /    %     分别对应加、减、乘、除、取余。
算数运算符的优先级和结合性
  *  /  %优先级要高于  +  -
  
JavaScript算数运算符注意点
  1、加法运算的注意点
    任何非数值类型的数据参与加法运算之前都会被自动转换为数值类型之后，再参与运算。
    任何数据和NaN相加结果都是NaN
    任何数据和字符串相加，都会被先转换成字符串之后再运算形成字符串相加   （字符串相加的本质就是字符串的拼接）例如1+"abc"="1abc";
  2、减法运算注意点
      任何非数值类型的数据参与减法运算之前都会被自动转换为数值类型之后，再参与运算。
      任何数据和NaN相减结果都是NaN
 **   任何数据和字符串相减都会先把字符串转化成数值然后相减运算
  3、乘法运算和除法运算注意点
     和减法运算注意点一模一样
  4、取模（取余）运算注意点
    格式：m % n = 余数
    如果m>n的话，那么就正常取余
    如果m<n的话，那么结果就是m
    如果n是0，那么结果就是NaN
    取余的结果的正负性取决于m而不是n

运算符
  复杂运算符：   +=   -=   *=    /=   
  
  let res = 5;
  //会将左边存储的值取出来和右边进行指定的运算，运算完毕之后再将运算的结果存储到左边
  res += 5;    //相当于res = res + 5;
  console.log(res);
  
自增和自减写在变量前面和后面的区别?
  写在变量的后面，表示变量先参与其他的运算，然后再自增或者自减
  写在变量的前面，表示变量先自增或者自减，然后再参与其他的运算
  例如：   let num = 1;
          let  res = num++ + 1;     //let res = num + 1;   num++;
          cosole.log(res);     //  2
          let res = ++num + 1;      //num++;     let res = num + 1;
          console.log(res);    //  3
自增自减运算符 注意点：
自增自减运算符只能出现在变量的前面或者后面，不能出现在常量或者表达式的前面或者后面
什么是表达式?
  表达式就是用运算符连接在一起有意义有结果的语句 ，我们称之为表达式
  例如：1 + 1；    let a = 5;  a *5 ;
 自增自减运算符在企业开发中最好单独出现，不要出现在表达式中
 

   
什么是关系运算符？
  > < >=  <=  ==  !=  ===  !===
关系运算符的返回值
  只有两个，要么是true要么是false
  如果关系成立，就返回true，如果关系不成立就返回false
关系运算符的注意点
  对于非数值型的数据，会先转换成数值类型，再进行判断
  对于关系运算符来说，任何数据 和NaN进行比较，返回值都是false
  如果参与比较的都是字符串类型，那么不会转换成数值类型再比较，而是直接比较字符对应的Unicode编码 
  例如：let res = "a" > "b";    //  res = /0061 > /0062;
  如果字符串中有多个字符，那么会从左至右的一次比较，直达条件不满足为止。
特殊比较结果：
       let res = null == 0;    //false
       let res = undefined == 0;    //false
       let res = null ==undefined;   //true
       在企业开发中千万不要通过==来判断某一个 数据是否为NaN，如果想判断某一个数据是否是NaN那么可以通过isNaN来进行判定
       例如：
         let num =NaN;
         let res = isNaN(num);
         console.log(res);
       
    等等与  和   不等于
     ===    ！==     
     ==只会判断取值是否相等，不会判断数据类型是否相等；   ===  不仅仅会判断取值是否相等还会判断数据类型是否相等只有取值和数据类型都相等的时候，才返回true
     ！==   不恒等于  取值或者数据类型有一个不相等的话就返回  true  
      

     关系运算符都是左结合性（从左至右运算）
     注意点：正因为关系运算符是左结合性，所以不能利用关系运算符来判断区间
     关系运算符中 > < >= <=的优先级大于 == !=  ===   !==

什么是逻辑运算符？
1、逻辑与   &&
格式：  条件表达式A && 条件表达式B
返回值： true  false
特点：  一假则假
2、逻辑或  ||
格式： 条件表达式A || 条件表达式B
返回值： 一真则真
逻辑非  ！
格式： ！条件表达式
特点： 真变假，假变真

逻辑运算符的优先级：  在逻辑运算中 && 的优先级高于 ||
逻辑运算符的注意点：
1·1在逻辑运算符中如果不是布尔类型，那么先转换成布尔类型，在参与其他的运算
1·2在逻辑与运算中，如果参与运算不是布尔类型，返回值有一个特点
  格式：条件A && 条件B
  如果条件A不成立，那么就返回条件A
  如果条件A成立，无论条件B是否成立，都会返回条件B
1·3在逻辑或运算中，如果参与运算的不是布尔类型，返回值有一个特点
  格式： 条件A || 条件B
  如果条件A成立，那么就返回条件A
  如果条件A不成立，无论B是否成立，都返回条件B
1·4在逻辑与运算中，有一个逻辑短路现象
  格式：条件A && 条件B
  由于逻辑与运算的规律是一假则假，所以只要A是假的，那么条件B就不会运算
1·5在逻辑或运算中，也有一个逻辑短路现象
  格式： 条件A || 条件B
  由于逻辑或运算的规律是有真则真，所以只要A是真的，那么条件B就不会运算了
  
三目运算符
  三目运算符又称之为条件运算符
  三目运算符格式：条件表达式 ？ 结果A ： 结果B；
  在三目运算符中当条件为真的时候，就会返回结果A；
  在三目运算符中当条件为假的时候，就会返回结果B；
三目运算符的注意点：
  在三目运算符中 ？ ： 不能单独出现，要么一起出现要么一起不出现
  
if注意点：
  1、对于非布尔类型的数据，会先转化成布尔类型再判断
  2、对于 ==  ===   判断将常量写在前面
  3、if    else if    else后面的大括号可以省略，但是省略之后只有紧随其后的语句受到控制
  4、JavaScript中分号  ；  也是一条语句（空语句）
  5、if选择结构可以嵌套使用
  6、当if选择结构省略大括号时，else if    else  会自动和距离最近没有被使用的if匹配。

在企业开发中，如果条件满足之后只有一句代码需要执行，那么就是用三目运算符
在企业开发中，如果条件满足之后有多句代码需要执行，那么就使用选择结构

**注意点： prompt返回值是字符串类型

switch
switch的格式：
  switch（表达式）｛
       case 表达式A：  
          语句A; 
          break;
       case 表达式B:   
          语句B; 
          break；
       ...  ...
       defalut: 前面所有都不匹配的代码；  break；
  ｝
  switch特点： 
      会从上至下的一次判断每一个case是否和（）中表达式的结果相等，如果相等就执行后面的代码，
    如果前面的所有代码都不匹配，那么就会执行default后面的代码
      并且所有的case和default只有一个会被执行，并且只会被执行一次
  
  switch注意点：
    1、case判断的是 ===  而不是  ==
    2、（）中可以是常量也可以是变量还可以是表达式
    3、case后面可以是常量也可以是变量还可以是表达式
    4、break的作用是立即结束整个switch语句，在switch语句中一旦case或者default被匹配，那么其他的case和default都会失效
    5、default不一定要写在最后面，switch中的default无论放到什么位置，都会等到所有case都不匹配再执行
    6、和if、else中的else一样，default也省略
  
  在企业开发中如果是对区间进行判断，那么建议用 if
  在企业开发中如果是对几个固定的值进行判断，那么建议使用switch
  原则：能用if就用if

while的格式：
  while（条件表达式）｛
  条件满足执行的语句；
  ｝
  while的特点：只有满足条件为真时才会执行后面｛｝中的代码，大括号中的代码可能被多次执行
  while的执行流程：
    1、首先会判断条件表达式是否为真，如果为真就执行后面｛｝中的代码
    2、执行完后面｛｝中的代码，会再次判断条件表达式是否还是为真
    3、如果条件表达式还为真，那么会再次执行｛｝中的代码
    4、重复1~3，直到条件表达式不为真为止

书写循环的规则：
  1、不管三七二十一先写上循环结构的代码
  2、将需要重复执行的代码拷贝到｛｝中
  3、在（）中指定循环结束条件

在企业开发中大部分情况while循环和dowhile循环是可以互换的，
在企业开发中如果循环体中的代码无论如何都需要先执行一次，那么建议使用dowhile循环
在企业开发中其他的情况都建议使用while循环

在JavaScript中定义变量有两种方式
ES6之前：  var 变量名称；
ES6之后：  let 变量名称；
两种定义变量的区别
  如果通过var定义变量，可以重复定义同名的变量，并且不会报错，并且后定义的会覆盖先定义的
  如果通过var定义变量，可以先使用后定义（预解析）
  如果通过let定义变量，不可以重复定义同名变量
  如果通过let定义变量，不可以先使用再定义，因为浏览器不会对let进行预解析
什么是全局变量：
  全局变量就是定义在｛｝外面的变量，我们就称之为全局变量
什么是局部变量
  局部变量就是定义在｛｝里面的变量，我们就称之为局部变量
全局变量和局部变量的区别
  如果是全局变量那么那么有效范围是从定义变量的那一行开始，直到文件的末尾都可以使用
  如果是局部变量，那么有效范围是从定义变量的那一行开始直到大括号结束为止（只有在大括号中才能使用）
注意点： 无论是通过 var还是通过let定义的全局变量，都是从定义的那一行到文件末位都可以使用
         如果是通过var定义的局部变量，和全局变量一样，后续都可以被使用
         如果是通过let定义的局部变量，那么这个变来个只能在当前定义变量的｛｝中使用
  
for循环的格式
  for（初始化表达式；条件表达式；循环后增量表达式）｛
          需要重复执行的代码；
  ｝
for循环的特点：
  for循环的特点和while循环的特点一样，只有条件表达式为真，才会执行循环体
for循环的执行流程
  1、首先会执行初始化表达式，并且只会执行一次
  2、判断条件表达式是否为真，如果条件表达式为真，就执行循环体
  3、执行完循环体就会执行循环后增量表达式
  4、重复2~3，直到条件表达式不为真为止
  
for循环和while循环怎么抉择？
   如果是while循环结束之后还可以使用用于控制循环结束的变量
   如果是for循环，在循环结束之后可以让外界使用也可以不让外界使用
   在企业开发中，由于for循环比while循环还更加灵活，所以能用for循环就用for循环

什么是continue关键字？
  continu关键字只能用于循环结构
  在循环结构中continue关键字的作用是跳过本次循环进入下一次循环
continue关键字的注意点：
  continue关键字后面和break一样，不能编写其他代码，因为执行不到
  和break一样，如果continue出现在循环嵌套结构中只会跳过当前所在的循环

在循环嵌套中，外循环控制的是行数，内循环控制的是列数。

什么是数组？
  数组就是专门用于存储一组数据的
注意点：和我们前面学习的Number、String、Boolean、Null、undefined不同（基本数据类型）
       而我们今天学习的数组（Array）不是基本数据类型，而是引用数据类型（对象类型）
如何创建一个数组？
  let 变量名称 = new Array(size);
如何操作数据？
  如何往数组中存储数据
    变量名称[索引号] = 需要存储的数据;
  如何从数组中获取存储的数据
    变量名称[索引号];

数组注意点：
  1、和其他编程语言不同 ，如果数组对应的索引中没有存储数据，默认存储的就是undefined其他编程语言默认保存的是垃圾数据或者0.
  2、和其他编程语言不同 ，JavaScript中访问了数组中不存在的索引不会报错，会返回undefined，其他编程语言一旦超出索引范围就会报错或者返回脏数据
  3、和其他编程语言不同 ，当JavaScript中数组存储空间不够时数组会自动扩容，其他编程语言数组的大小是固定的
  4、和其他编程语言不同 ，JavaScript数组可以存储不同的数据类型，在其他编程语言中数组只能存储相同类型数据（要么全是字符串，要么全是数值等）
  5、和其他编程语言不同 ，JavaScript中数组分配的存储空间不一定是连续的，其他语言数组分配的存储空间都是连续的，javascript数组采用的是“哈希映射”方式分配存储空间
      什么是哈希映射？  好比字典可以通过偏旁部首找到对应的汉字，我们可以通过索引找到对应的空间
      在浏览器中各大浏览器也对数组分配存储空间进行了优化
      如果都是想同类型的数据，那么会尽量分配连续的存储空间
      如果存储的是不同类型的数据 ，那么就不会分配连续的存储空间
  6、创建数组的其他方式：
       通过构造函数创建数组
         let 变量名称 = new Array(size);  创建一个指定大小的数组
         let 变量名称 = new Array();   创建一个空数组
         let 变量名称  = new Array(data1,data2,data3,...);   创建一个带数据的数组
      通过字面量创建数组
        let 变量名称 = [];   创建一个空数组
        let 变量名称 = [data1,data2,data3,...];  创建一个空数组
        
什么是数组遍历？
  数组遍历就是依次取出数组中存储的所有数据，我们称之为数组的遍历

什么是数组的解构赋值？
  解构赋值是ES6中新增的一种赋值方式
数组解构赋值的注意点：
  1、在数组的解构赋值中等号左边的格式必须和等号右边的格式一模一样，才能够完全解析
  2、在数组的解构赋值中，左边的 个数可以少于右边
  3、在数组的解构赋值中，右边的 个数可以少于左边
  4、在数组的解构赋值中，如果右边的个数少于左边的个数，那么我们可以给左边设置默认值eg：let[a, b = 666,c = 888] = [1];
  5、在数组的解构赋值中，如果左边的个数少于右边，那么如果设置默认值会被覆盖。
  6、在数组的解构赋值中，还可以使用ES6中新增的扩展运算符来打包剩余的数据
      ES6新增赠的扩展运算符：   ...
      
   <script>
        let arr = ["a" , "b" , "c"];
        //需求： 获取数组中索引为1的那个数（查）
        // console.log(arr[1]);
        
        //需求： 将索引为1的数据修改为m（改）
        // arr[1] = "m";
        // console.log(arr);
        
        //需求： 将索引为1的数据改为d，索引为2的数据改为e（改）
        /*arr[1] = "d";
        arr[2] = "e";
        console.log(arr);*/

        /*  arr.splice()的使用： 参数1：从什么位置开始；参数2：需要替换多少个元素；参数3开始： 新的内容   */
        /*arr.splice(1 , 2 , "d", "e");
        console.log(arr);*/
        
        //需求： 要求在数组最后添加一条数据（增）
       /* arr[3] = "d";
        console.log(arr);*/

       //push方法可以在数组的最后新增一条数据，并且会将新增内容之后数组当前的长度返回给我们
        /*let res = arr.push("d");
        console.log(res);
        console.log(arr);*/
        
        //需求： 要求在数组最后添加两条数据（增）
        /*arr.push("d");
        arr.push("e");
        console.log(arr);*/
        //push方法可以接收1个或多个参数
        /*arr.push("d" , "e");
        console.log(arr);*/
        
        //需求： 要求在数组最前面添加一条数据（增）
        //unshift方法和push方法一样，会将新增内容之后当前数组的长度返回给我们
        /*let res = arr.unshift("u");
        console.log(res);
        console.log(arr);*/

        //需求： 要求在数组的最前面添加两条数据（增）
       /* arr.unshift("u");
        arr.unshift("n");
        console.log(arr);*/   //输出内容为："n","u","a","b","c"
        //unshift和push方法一样可以接收一个或多个参数
        /*arr.unshift("u","n");
        console.log(arr); */    //输出内容为："u","n","a","b","c"与上面的是不一样的，如果想要一样得调换位置
        
        //需求：要求删除数组最后一条数据（删）
        //数组的pop方法可以删除数组中的最后一条数据，并且把删除的数据返回给我们
        /*let res = arr.pop();
        console.log(res);
        console.log(arr);*/

        //需求：要求删除数组最前面一条数据（删）
        //数组的shift方法可以删除数组中的最前面一条数据，并且把删除的数据返回给我们
        /*let res = arr.shift();
        console.log(res);
        console.log(arr);*/

        //需求：要求删除数组中索引为1的数据（删）
        //以下代码含义：从索引为1的元素开始删除1条数据
        //参数1：从什么位置开始    参数2： 需要删除多少个元素
        /*arr.splice(1,1);
        console.log(arr);*/
        
        //需求：要求删除数组除了第0条以外的所有数据（删）
        /*arr.splice(1,2);
        console.log(arr);*/
        //需求：
    </script>

关于数组的常用方法介绍：
   <script>
     //   let arr = [1 , 2 , 3 , 4 , 5 ];

        // 1、如何清空数组
       /* arr.length = 0;
        console.log(arr);*/

       /*arr.splice(0 , arr.length);
        console.log(arr);*/

       /*arr = [];
        console.log(arr);*/
        // 2、如何将数组转换为字符串
        /*let str = arr.toString();
        console.log(typeof str);
        console.log(str);*/

        // 3、如何将数组转换为指定格式的字符串
        //join方法默认情况下如果没有传递参数，就是调用toString();
        //join方法如果传递了参数，就会将传递的参数作为元素与元素之间的连接符号
        // let str = arr.join();
       /* let str = arr.join("&");
        console.log(str);
        console.log(typeof str);*/

        // 4、如何将两个数组拼接为一个数组
        //数组不能使用加号进行拼接，如果使用加号进行拼接会先转换成字符串再拼接在一起
        let arr1 = [1 , 3 , 5];
        let arr2 = [2 , 4 , 6];

        /*let res = arr1.concat(arr2);
        console.log(res);
        console.log(typeof res);
        //不会修改原有的数组，会生成一个新的数组返回给我们。
        console.log(arr1);
        console.log(arr2);*/

        //注意点：扩展运算符在解构赋值中（等号的左边），表示把右边剩余的数据打包成一个新的数组
        //扩展运算符在等号的右边，那么表示将数组中所有的数据展开，放到所在的位置。
        /*let res = [...arr1,...arr2];
        console.log(res);
        console.log(typeof res);
        //不会修改原有的数据，会返回一个新的数组给我们
        console.log(arr1);
        console.log(arr2);*/

        // 5、如何对数组中的内容进行反转
        //[1 , 2  , 3 , 4 , 5]   到   [5 , 4 , 3 , 2 , 1]
       /* let res = arr.reverse();
        console.log(res);
        //注意点：会修改原有的数组
        console.log(arr);*/

        // 6、如何截取数组中指定范围内容
        //slice方法是包头不包尾（包含起始位置，不包含结束位置）
        /*let res = arr.slice(1 , 3);
        console.log(res);
        console.log(arr);*/

        // 7、如何查找元素在数组中的位置
     //            0   1   2   3   4
        let arr = [1 , 2 , 3 , 4 , 5 ,3];
        //indexOf方法如果找到了指定元素，就会返回指定元素的索引号
        //indexOf方法如果没有找到指定的元素就会返回-1
        //注意点：indexOf方法默认是从左至右查找，一旦找到就会立即停止查找
        // let res = arr.indexOf(3);
        /*let res = arr.indexOf(6);
        console.log(res);*/

        //参数1：需要查找的元素   参数2：从什么位置开始查找
        /*let res = arr.indexOf(3 ,4);
        console.log(res);*/
     //注意点： lastIndexOf方法默认是从右至左的查找，一旦找到就会立即停止查找
        /*let res = arr.lastIndexOf(3);
        console.log(res);*/
        
     // 8、如何判断数组中是否包含某个元素
        //我们可以通过indexOf或者lastIndexOf的结果是否为-1来确定
        let res = arr.includes(8);
        console.log(res);
     //通过indexOf和lastInndexOf用于判断元素在哪个位置比较好（返回的是元素所在位置的索引号），
     //使用includes用于判断数组中是否有这个元素比较好因为他的返回值有则是true，没有则是false。
    </script>

*在字符串中有一个split函数,可以使字符串通过里面的方法分开为数组,并且返回给我们.

什么是二维数组?
  二维数组就是数组的每一个元素又是一个数组,我们就称之为二维数组.
如何操作二维数组?
  如何从二维数组中获取数据
    数组名称[二维数组索引]; 得到一个一维数组
    数组名称[二维数组索引][一维数组索引];  得到一位数组中的元素
  如何往二维数组中存储数据
    数组名称[二维数组索引] = 一维数组;
    数组名称[二维数组索引][一维数组索引] = 值;

什么是函数?
  函数是专门用于封装代码的,函数是一段可随时被反复执行的代码块.
函数格式:
  function 函数名称(形参列表){
        被封装的代码;
  }
不使用代码的弊端: 
  冗余代码太多  需求变更,需要修改很多代码
使用函数的优点: 
  冗余代码变少, 需求变更,需要修改的代码变少

函数定义步骤
  1.书写函数的固定格式
  2.给函数起一个有意义的名字
    为了提升代码的阅读性
    函数名也是标志符的一种,所以也需要遵守标志符的命名规范
  3.确定函数的形参列表
    看看使用函数的时候是否需要传入一些辅助数据
  4.将需要封装的代码拷贝到{}中
  5.确定函数的返回值
    可以通过   return 数据;   的格式,将函数计算结果返回给函数的调用者.

1.一个函数可以有形参也可以没有形参(零个或者多个)  什么是形参?定义函数时()中的边变量我们就称之为形参
2.一个函数可以有返回值也可以没有返回值
3.函数没有通过return明确返回值,默认返回undefined
4.return的作用和break相似,所以return后面不能编写任何语句  break的作用是立即结束switch语句或者循环
   return的作用是立即结束当前所在的函数
5.调用函数时实参的个数和形参的个数可以不同  什么是实参? 调用函数时我们会传入的数据我们就称之为实参
6.JavaScript中的函数和数组一样,都是引用数据类型,既然是数类型,所以也可以保存到一个变量中




















