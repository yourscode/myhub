Git的三层结构：      working directory    工作区
                    staging index        暂存区
                    git directory（Repository）    版本库

Git文件的四种状态：   untracked   未被追踪
                     Modified    表示工作区修改了某个文件但是还没有添加到暂存区。
                     Staged      表示把工作区修改的文件添加到了暂存区但是没有提交到版本库
                     Committed   表示数据库被安全的存储在本地库中
配置用户信息我是谁：    git config --global user.name huzhihui    用于配置姓名
                      git config --global user.email 415943594@qq.com    用于配置邮箱
                      git config --list   查看git的配置情况
                      
git init 命令 初始化git仓库，出现  .git  文件      
git add   git add filename   将文件添加到暂存区(要包括文件的后缀)
使用git add .    将工作目录下所有修改的文件添加到暂存区

使用git add .   命令把本地所有文件提交     git commit -m 'add new files'  命令可以把暂存区的所有文件都提交到版本库中
可以使用git commit -am 'remodifile' 来一次性把工作区的文件直接提交到版本库中，也就是把git add  命令和git commit -m ''  合并成这一个命令

git的撤销操作
git commit --amend  命令的作用：将取消上一次的提交，将暂存区的文件重新提交，形成一个新的版本，如果想改变这个版本的描述的话，不对内容进行任何的改变只对版本的描述
git checkout -- filename    如果我们把工作区的文件修改了，然后我们想撤销我们的修改然后我们就可以使用git checkout -- filename  命令来进行恢复修改前的样子。如果修改了多个文件，可以使用git checkout -- .  命令把所有被修改的文件都恢复成原来的样子
git checkout -- filename  这个指令也可以把暂存区的文件拉回到工作区。
git reset HEAD filename   拉取最近一次提交的版本库中的这个文件到暂存区，该操作不影响工作区，如果想把工作区的文件修成暂存区的文件话，要使用git checkout -- filename 命令把暂存区文件拉回工作区
HEAD指的是头指针

git rm
     git rm file: 从staging区移除文件,同时也移除出工作目录.

     git rm --cached: 从staging区移除文件,但留在工作目录中.

     git rm --cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.

删除操作
通常情况下，我们把文件直接删除后要在git bash里面输入git add .  操作把此次操作添加到暂存区（这是我们工作中最常用的删除方式）
git rm index.html    删除暂存区和工作区中的文件
当修改工作区文件后：  git rm --cached index.html    命令表示删除暂存区的文件，对工作区没有影响
                    git rm -f index.html         命令表示暂存区的文件和工作区的文件一起删除
重命名操作：       mv oldname newname  该操作只会修改工作区的文件，还要使用git add .  命令进行提交才行
                  git oldname newname  该操作会把工作区和暂存区的文件名全修改好，不需要再添加到暂存区中   

Git分支
git branch    查看当前分支
git branch branchname    创建新的分支
git checkout branchname   用于切换到相应的分支
git branch -d branchname    用于删除相应的分支，注意删除时不能在被删除的分支上面
git branch -m dev fix       把分支名称dev修改成fix
git checkout -b dev         创建一个分支并切换到这个分支








Git廖雪峰的Git教程

git log --pretty=oneline
git reset --hard  fc0d24e  回到某一次commit 时候数字代表的是commit的id，
git reset --hard head^     回到上一次提交，^表示回到上一次，^^表示回到上两次，以此类推。
git checkout readme.txt    撤销工作区的文件。
git reset head readme.txt      撤销暂存区的文件回到工作区，可以使用git checkout readme.txt命令把工作区的文件修改为原来的样子。









