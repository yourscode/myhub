创建默认对象:
   1.JavaScript中提供了一个默认的类Object,我们可以通过这个类来创建对象
   2.由于我们是使用系统默认的类创建对象,所以系统不知道我们想要什么属性和行为,所以我们必须手动添加我们想要的属性和行为
   3.如何给一个对象添加属性:    对象名称.属性名称 = 值;
   4.如何给一个对象添加行为:    对象名称.行为名称 = 函数
在第三种格式中: 注意点: 属性名称和取值之间用冒号隔开,属性与属性之间用逗号隔开
什么是函数? 
  函数是没有和其他类显示的绑定在一起的,我们就称之为函数
什么是方法?
  方法就是显示的和其他的类显示的绑定在一起的,我们就称之为方法
函数和方法的区别: 1.函数可以直接调用,但是方法不可以直接调用,只能通过类来调用
                 2.函数内部的this输出的是window,方法内部的this输出的是当前调用的那个对象
注意: 无论是方法还是对象,内部都有一个叫做this的东东.
  this是什么?    谁调用了当前的函数或者方法,那么当前的this就是谁
  
什么是工厂函数?  
  工厂函数就是专门用来创建对象的函数,我们就称之为工厂函数
什么是构造函数?
  构造函数和工厂函数一样都是专门用于创建对象的,构造函数本质上是工厂函数的简写
构造函数和工厂函数的区别
  1.构造函数的函数名称首字母必须大写
  2.构造函数只能通过new来调用
当我们new Person("hzh",22);系统做了什么事?
  1.会在构造函数中自动创建一个对象
  2.会自动将刚刚创建的对象赋值给this
  3.会在构造函数的最后面添加return this;

通过三个等号来判断两个函数的名称,表示两个函数是否都存储在同一个函数当中
注意点: 由于两个对象中的say方法 实现的都是一样的,但是保存到了不同的存储空间中,所以有性能问题

prototype的特点:
  1.存储在prototype中的方法可以被对应构造函数创建出来的所有对象共享
  2.prototype中除了可以存储方法以外,还可存储属性
  3.prototype如果出现了和构造函数中同名的属性或者方法,对象在访问的时候,访问到的是构造函数中的方法或者属性.
prototype应用场景
  prototype中一般情况下用于存储所有对象都相同的一些属性以及方法,如果是对象特有的属性或者方法,我们会存储到构造函数中

1,每个"构造函数"中都有一个默认的属性,叫做prototype,prototype属性中保存着一个对象,这个对象我们称之为"原型对象"
2,每个"原型对象"中都有一个默认的属性,叫做constructor,constructor指向当前原型对象对应的那个"构造函数"
3,通过构造函数创建出来的对象我们称之为"实例对象",每个"实例对象"中都有一个默认的属性,叫做 __proto__ ,
   __proto__指向创建它的那个构造函数的"原型对象".

1,JavaScript中函数是引用类型(对象类型),既然是对象,所以是通过构造函数创建出来的,所有函数都是通过Function
构造函数创建出来的对象,
2,JavaScript中只要是"函数"就有prototype属性,"Function函数"的prototype属性指向"Function原型对象"
3,JavaScript中只要"原型对象"就有constructor指向它对应的构造函数

    Object函数是构造函数,是Function函数的实例化对象

Function函数是所有函数的祖先函数
所有构造函数都有一个prototype属性
所有原型对象都有一个constructor属性
所有函数都是对象 
所有对象都有一个__proto__属性

注意点: 为了不破坏原有的关系,在给prototype赋值的时候,需要在自定义的对象中手动添加constructor属性,手动的指定需要指向谁
        eg: constructor : Person;
注意点: 在给一个对象不存在的属性设置值的时候,不会去原型对象中查找,如果当前对象美原油就会给当前对象新增一个不存在的属性值

结论: 默认情况下对象的属性和方法都是公开的,只要拿到对象就可以操作对象的属性和方法.

什么是封装?
  封装就是隐藏实现细节,仅对外公开接口
为什么要封装?
  1.不封装的缺点: 当一个类把自己的成员变量暴露给外部的时候,那么该类就失去了对属性的管理权,别人可以任意的修改你的数据
  2.封装就是将数据隐藏起来,只能用此类方法才可以读取或者设置数据,不可被外部任意修改,
  封装是面向对象设计本质(将变化隔离).这样降低了数据被误用的可能(提高安全性和灵活性)
在JavaScript中属性和方法分类
  在企业开发中通过实例对象访问的属性,我们就称之为实例属性
  在企业开发中通过实例对象调用的方法,我么就称之为实例方法
  在企业开发中通过构造函数访问的属性,我们称之为静态属性
  在企业开发中通过构造函数调用的方法 ,我们就称之为静态方法

bind call 和apply函数的作用
   这三个函数都是用于修改函数或者方法中的this的
   1,bind方法的作用
        修改函数方法中this指定的对象,并且返回一个修改之后的新函数给我们
        注意点: bind方法除了可以修改this以外,还可以传递参数,只不过参数需要放在this对象的后面
        let fn = f.bind(obj,0,20);
        fn();
   2,call方法的作用
        修改函数方法中this指定的对象,并且会立即调用修改后的函数
        注意点:call方法除了可以修改this以外还可以传递参数,只不过参数需要放在this对象后面   f.call(obj,10,50);
   3,apply方法的作用
        修改函数方法中this指定的对象,并且会立即调用修改后的函数
        注意点: apply方法除了可以修改this以外还可以传递参数,只不过参数只能通过数组的方式传递
        
   注意点: 要想使用Person原型对象中的属性和方法,那么就必须将Student的原型对象改为Person的原型对象才可以    

js中继承的终极方法:
    1,在子类的构造函数中通过call借助父类的构造函数
    2,将子类的原型对象修改为父类的实例对象
 什么是多态?
        多态是指事物的多种状态
        例如:
        按下 F1 键这个动作，
        如果当前在 webstorm 界面下弹出的就是 webstorm 的帮助文档；
        如果当前在 Word 下弹出的就是 Word 帮助；
        同一个事件发生在不同的对象上会产生不同的结果。

        3.多态在编程语言中的体现
        父类型变量保存子类型对象, 父类型变量当前保存的对象不同, 产生的结果也不同
 在ES6之前如何定义一个类?  
      通过构造函数来定义一个函数
 从ES6开始系统提供了一个叫做class的关键字,这个关键字就是专门用于来定义类的.
 
 
 新的篇章:   
     以下定义的"实例属性"的方式并不是ES6正式标准版中的写法,(eg:  name = "lnj";  age = 34;)大部分浏览器都不支持
     在ES6标准中添加实例属性都需要在constructor中添加
     eg: constructor(){
         this.name = "hzh";
         this.age = 22;
         this.say() = {
         console.log(this.name,this.age);
     }
     
     注意: 在constructor里面添加的属性和方法是实例属性和实例方法,在constructor外面添加的方法会自动
     添加到prototype里面去,变成原型对象里面的方法,但是属性要添加到prototype里面去,写在外面不行,必须得
     Person.prototype.type = "人";   这样才行,当然这种方法也可以添加方法
        在ES6标准中static只能定义函数,不能定义属性,不然在大多数属性中不能使用
        
      注意: ES6中不能自定义prototype!     例如: Person.prototype = {};    这样是错误的,因为这样的话就不能把写在
      constructor外面的方法添加到prototype里面了       (在116-117)
    
  获取数据类型: 
    let arr = new Array();
    console.log(arr.constructor.name);     //Array
    arr 里面没有constructor属性所以他会向他的原型对象里面去寻找constructor里面去寻找,找到了,然后constructor里面会有一个叫做name的属性
    name可以获取真实的类型,可以获取他的构造函数的名称
 
 instanceof关键字
    什么是instanceof关键字/
    instanceof用于判断"对象"是否是指定构造函数的"实例"
  注意点: 如果指定构造函数的实例对象出现在那个实例对象的原型链中,  console.log(stu instanceof Person);   就会返回true(Student构造函数继承Person构造函数)

什么是isPrototypeOf 属性? 
  isPrototypeOf属性用于判断一个对象是否是另一个对象的原型
  eg:  console.log(Student.prototype.isPrototypeOf(stu));  // true   Person的原型对象在实例对象stu的原型链中就会返回true
  
判断对象属性,
   in的特点: 只要类中或者原型对象中有那个属性,就会返回true    eg:  console.log("name" in p);    //true
   如果只想判断一个对象自身是否拥有某一个属性不判断原型对象中是否有这个属性:    console.log(p.hasOwnProperty("height"));  //false  height是prototype里面的
       
对象的增删改查:
       class Person{}
    let p = new Person();
    //增加
    // p.name = "lnj";
    p["name"] = "lnjj";
    /*p.say = function(){
        console.log("hello world1");
    };*/
    p["say"] = function(){
        console.log("hello world");
    }
    // console.log(p);
    //删除
    // delete p.name;
   // delete p["name"];
    // delete p.say;
    // delete p["say"];
    // console.log(p);

    //修改
    // p.name = "bbe";
    p["name"] = "bbe";
   /* p.say = function(){
        console.log("hello dl");
    };*/
   p["say"] = function(){
       console.log("hello dl");
   };
    p.say();
    //查询

    console.log(p.name);
    console.log(p["name"]);
    p.say();
    
    
对象的遍历: 
     1.在JavaScript中对象和数组一样是可以遍历的
     2.什么是对象的遍历?
         对象的遍历就是依次取出对象中所有的属性和方法
     3.如何遍历一个对象
        在JS中可以通过高级for循环来遍历对象
        以下代码含义: 将指定对象中所有的对象和方法名称取出来赋值给key这个变量
          eg:  for(let  key in obj){
          
          }
          
    for(let key in p){
        // console.log(key);
        //以下代码的含义取出p对象中名称叫做当前遍历到的名称的属性或者方法的取值
        // console.log(p[key]);
        //注意点: 以下代码的含义取出p对象中名称叫做key的属性的取值
        console.log(p.key);
    }
    注意: 因为key的类型是String类型的所以  console.log(p[key]);  就行不需要添加   ""

对象解构赋值:
    let  {age,name}  ={name : "lnj",age:34};
    console.log(name,age);   //lnj  34
注意点: 在对象解构赋值中,左边的变量名称必须和变量的属性名称一致,才能解构出来数据


深拷贝和浅拷贝
    什么是深拷贝?
       修改新变量的值不会修改原有变量的值,默认情况下,基本数据类型都是深拷贝
    什么是浅拷贝
        修改新变量的值会修改原有变量的值,默认情况下,引用类型都是浅拷贝

对象深拷贝:
    assign方法可以将第二个参数的对象属性和方法拷贝到第一个参数的对象中(assign是Object里面的方法)
         eg:  Object.assign(p2,p1);

实现真正的深拷贝:
        function depCopy(target,source) {
       //1.通过遍历拿到source中所有的属性
       for(let key in source){
           // console.log(p1[key]);
           //2.取出当前遍历到的属性对应的取值
            let sourceValue = source[key];
            // console.log(sourceValue);
           //判断当前的取值是否是引用数据类型
           if(sourceValue instanceof Object){
               // console.log(sourceValue.constructor);
               // console.log(new sourceValue.constructor);
               let subTarget = new sourceValue.constructor;
               target[key] = subTarget;
               depCopy(subTarget,sourceValue);
           }else{
               target[key] = sourceValue;
           }
       }
   }













