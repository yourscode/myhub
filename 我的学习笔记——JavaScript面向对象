创建默认对象:
   1.JavaScript中提供了一个默认的类Object,我们可以通过这个类来创建对象
   2.由于我们是使用系统默认的类创建对象,所以系统不知道我们想要什么属性和行为,所以我们必须手动添加我们想要的属性和行为
   3.如何给一个对象添加属性:    对象名称.属性名称 = 值;
   4.如何给一个对象添加行为:    对象名称.行为名称 = 函数
在第三种格式中: 注意点: 属性名称和取值之间用冒号隔开,属性与属性之间用逗号隔开
什么是函数? 
  函数是没有和其他类显示的绑定在一起的,我们就称之为函数
什么是方法?
  方法就是显示的和其他的类显示的绑定在一起的,我们就称之为方法
函数和方法的区别: 1.函数可以直接调用,但是方法不可以直接调用,只能通过类来调用
                 2.函数内部的this输出的是window,方法内部的this输出的是当前调用的那个对象
注意: 无论是方法还是对象,内部都有一个叫做this的东东.
  this是什么?    谁调用了当前的函数或者方法,那么当前的this就是谁
  
什么是工厂函数?  
  工厂函数就是专门用来创建对象的函数,我们就称之为工厂函数
什么是构造函数?
  构造函数和工厂函数一样都是专门用于创建对象的,构造函数本质上是工厂函数的简写
构造函数和工厂函数的区别
  1.构造函数的函数名称首字母必须大写
  2.构造函数只能通过new来调用
当我们new Person("hzh",22);系统做了什么事?
  1.会在构造函数中自动创建一个对象
  2.会自动将刚刚创建的对象赋值给this
  3.会在构造函数的最后面添加return this;

通过三个等号来判断两个函数的名称,表示两个函数是否都存储在同一个函数当中
注意点: 由于两个对象中的say方法 实现的都是一样的,但是保存到了不同的存储空间中,所以有性能问题

prototype的特点:
  1.存储在prototype中的方法可以被对应构造函数创建出来的所有对象共享
  2.prototype中除了可以存储方法以外,还可存储属性
  3.prototype如果出现了和构造函数中同名的属性或者方法,对象在访问的时候,访问到的是构造函数中的方法或者属性.
prototype应用场景
  prototype中一般情况下用于存储所有对象都相同的一些属性以及方法,如果是对象特有的属性或者方法,我们会存储到构造函数中

1,每个"构造函数"中都有一个默认的属性,叫做prototype,prototype属性中保存着一个对象,这个对象我们称之为"原型对象"
2,每个"原型对象"中都有一个默认的属性,叫做constructor,constructor指向当前原型对象对应的那个"构造函数"
3,通过构造函数创建出来的对象我们称之为"实例对象",每个"实例对象"中都有一个默认的属性,叫做 __proto__ ,
   __proto__指向创建它的那个构造函数的"原型对象".

1,JavaScript中函数是引用类型(对象类型),既然是对象,所以是通过构造函数创建出来的,所有函数都是通过Function
构造函数创建出来的对象,
2,JavaScript中只要是"函数"就有prototype属性,"Function函数"的prototype属性指向"Function原型对象"
3,JavaScript中只要"原型对象"就有constructor指向它对应的构造函数

    Object函数是构造函数,是Function函数的实例化对象

Function函数是所有函数的祖先函数
所有构造函数都有一个prototype属性
所有原型对象都有一个constructor属性
所有函数都是对象 
所有对象都有一个__proto__属性

注意点: 为了不破坏原有的关系,在给prototype赋值的时候,需要在自定义的对象中手动添加constructor属性,手动的指定需要指向谁
        eg: constructor : Person;
注意点: 在给一个对象不存在的属性设置值的时候,不会去原型对象中查找,如果当前对象美原油就会给当前对象新增一个不存在的属性值

结论: 默认情况下对象的属性和方法都是公开的,只要拿到对象就可以操作对象的属性和方法.

什么是封装?
  封装就是隐藏实现细节,仅对外公开接口
为什么要封装?
  1.不封装的缺点: 当一个类把自己的成员变量暴露给外部的时候,那么该类就失去了对属性的管理权,别人可以任意的修改你的数据
  2.封装就是将数据隐藏起来,只能用此类方法才可以读取或者设置数据,不可被外部任意修改,
  封装是面向对象设计本质(将变化隔离).这样降低了数据被误用的可能(提高安全性和灵活性)
在JavaScript中属性和方法分类
  在企业开发中通过实例对象访问的属性,我们就称之为实例属性
  在企业开发中通过实例对象调用的方法,我么就称之为实例方法
  在企业开发中通过构造函数访问的属性,我们称之为静态属性
  在企业开发中通过构造函数调用的方法 ,我们就称之为静态方法

bind call 和apply函数的作用
   这三个函数都是用于修改函数或者方法中的this的
   1,bind方法的作用
        修改函数方法中this指定的对象,并且返回一个修改之后的新函数给我们
        注意点: bind方法除了可以修改this以外,还可以传递参数,只不过参数需要放在this对象的后面
        let fn = f.bind(obj,0,20);
        fn();
   2,call方法的作用
        修改函数方法中this指定的对象,并且会立即调用修改后的函数
        注意点:call方法除了可以修改this以外还可以传递参数,只不过参数需要放在this对象后面   f.call(obj,10,50);
   3,apply方法的作用
        修改函数方法中this指定的对象,并且会立即调用修改后的函数
        注意点: apply方法除了可以修改this以外还可以传递参数,只不过参数只能通过数组的方式传递
        
   注意点: 要想使用Person原型对象中的属性和方法,那么就必须将Student的原型对象改为Person的原型对象才可以    

js中继承的终极方法:
    1,在子类的构造函数中通过call借助父类的构造函数
    2,将子类的原型对象修改为父类的实例对象
 什么是多态?
        多态是指事物的多种状态
        例如:
        按下 F1 键这个动作，
        如果当前在 webstorm 界面下弹出的就是 webstorm 的帮助文档；
        如果当前在 Word 下弹出的就是 Word 帮助；
        同一个事件发生在不同的对象上会产生不同的结果。

        3.多态在编程语言中的体现
        父类型变量保存子类型对象, 父类型变量当前保存的对象不同, 产生的结果也不同
 在ES6之前如何定义一个类?  
      通过构造函数来定义一个函数
 从ES6开始系统提供了一个叫做class的关键字,这个关键字就是专门用于来定义类的.

















