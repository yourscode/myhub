JavaScript学习笔记开篇:
  什么是宿主?
     宿主就是JavaScript运行环境,js可以在浏览器中运行,也可以在服务器上面运行,(node.js)
  本地对象:
      与宿主无关,无论在浏览器还是服务器中都有的对象,就是ECMAScript标准中定义的类(构造函数)
      在使用过程中需要我们手动new创建
      例如:  Boolean   Number  String   Array   Function   Object   Date   RegExp
    内置对象: 
    与宿主无关: 无论在浏览器还是服务器中都有的对象,ECMAScript已经帮我们创建好的对象
    在使用过程中需要我们手动创建
    例如:  Global   Math  JSON
    宿主对象:  
        对于嵌入到网页中的JS来说,其宿主对象就是浏览器,所以宿主对象就是浏览器提供的对象
        包含: Window和Document等
        所有的DOM和BOM对象都属于宿主对象
        
        
什么是window?
   window:  是全局对象,代表浏览器中一个打开的窗口,每一个窗口都是一个打开的对象
什么是document?
   document是window的一个属性,这个属性是一个对象
   document: 代表当前窗口中整个网页
   通过document对象我们就可以操作整个网页上的所有内容
什么是DOM  
   DOM定义了访问和操作HTML文档(网页)的标准方法
   DOM全称:  Document Object Model  即文档模型对象
   所以我们学习DOM就是学习如何通过document对象操作网页上面的内容
   
在JavaScript中HTML标签也称之为DOM元素
使用document的时候前面不用加window
    1.通过ID获取指定的元素
    let oDiv = document.getElementById("box");
        由于id不可以重复,所以找到了就会把找到的标签包装成一个对象,返回给我们,找不到就返回NUll
        注意点:  DOM操作返回的是一个对象,这个对象是宿主类型对象(浏览器提供的对象)
    2.通过class名称获取
    let oDivs = document.getElementsByClassName("father");
        会返回给我们一个伪数组
    3.name获取
    let oDivs = document.getElementsByName("test");
        会返回一个伪数组
    4.通过标签名称获取
    let oDivs = document.getElementsByTagName("div");
        会返回一个伪数组
    5.通过选择器获取
    let oDivs = document.querySelector(".father");
    querySelector只会返回根据指定选择器找到的第一个元素
    6.通过选择器获取所有的
    let oDivs = document.querySelectorAll("div");
    querySelectorAll
    返回给我们一个伪数组
 
 什么是节点: 包括文本,属性,还有子元素


let oDiv = document.querySelector("div");
    // children属性获取到的指定元素中所有的子元素
    console.log(oDiv.children);
    //childNodes属性获取到的是指定元素中的节点
    console.log(oDiv.childNodes);
    for(let node of oDiv.childNodes){
        /!*console.log(node);
        console.log(node.nodeType);*!/
        // if(node.nodeType == 1){
        if(node.nodeType === Node.ELEMENT_NODE){
            console.log(node);
        }
    }
 

获取DOM元素:

 //1.获取指定节点中的第一个子节点
      let oDiv = document.querySelector("div");
      // console.log(oDiv.children);
      // console.log(oDiv.firstChild);
      //1.获取指定节点中的第一个子元素
      /!*console.log(oDiv.firstElementChild);

      console.log(oDiv.lastChild);
      console.log(oDiv.lastElementChild);*!/

      //通过子元素获取父元素/父节点
      let item = document.querySelector(".item");
     /!* console.log(item.parentElement);
      console.log(item.parentNode);*!/

      //获取相邻上一个节点
      /!*console.log(item.previousSibling);
      //获取相邻上一个元素
      console.log(item.previousElementSibling);*!/

      //获取相邻下一个节点
      console.log(item.nextSibling);
      //获取相邻下一个元素
      console.log(item.nextElementSibling);
      
      


***快捷键: document.querse   document.querySelector()


增删改查:
     //1.创建节点(创建返回的是一个对象)
    // let oSpan = document.createElement("span");
    // console.log(oSpan);
    // console.log(typeof oSpan);

    //2.添加节点
    //注意点:appendChild方法会将指定的元素添加到最后面
    // let oDiv = document.querySelector("div");
    // oDiv.append(oSpan);
    // let oA = document.createElement("a");
    // oDiv.append(oA);
    // let oDiv = document.querySelector("div");

    //快捷键: document.querse   document.querySelector()
    //插入节点:
    // let oSpan = document.createElement("span");
    // let oDiv = document.querySelector("div");
    // let oH1 = document.querySelector("h1");
    // let oP = document.querySelector("p");

    // oDiv.insertBefore(oSpan,oH1);
    // oDiv.insertBefore(oSpan,oP);

    //4.删除节点:
    //注意点: 在js中如果想要删除某一个元素,只能通过对应的父元素来删除,元素是不能自杀的
    // console.log(oSpan.parentNode);
    // oSpan.parentNode.removeChild(oSpan);
    // oDiv.parentNode.removeChild(oDiv);

    //5.克隆节点:
    //注意点: cloneNode方法默认不会克隆子元素,如果想要克隆一个节点需要传递一个参数true
    let oDiv = document.querySelector("div");
    let newDiv = oDiv.cloneNode(true);
    console.log(newDiv);


元素属性修改
    无论是通过document创建还是查询出来的标签,系统都会将元素包装成一个对象返回给我们
    系统在包装这个对象的时候会自动将元素的属性都包装到这个对象中
    所以只要拿到这个对象就可以拿到标签属性,操作标签属性
 
 //1.如何获取元素的属性
    // let oImg = document.querySelector("img");
    // console.log(oImg.alt);
    // console.log(oImg.getAttribute("alt"));
    //注意点: 通过   对象.属性名称的方式无法获取到自定义属性的取值
    //通过  getAttribute   方法可以获取到自定义属性的取值
    // console.log(oImg.nb);
    // console.log(oImg.getAttribute("nb"));

    //2.如何修改元素属性
    //     let oImg = document.querySelector("img");
        // oImg.alt = "zhaobudaole";
        // oImg.setAttribute("alt","woshi Attribute");
        // console.log(oImg.getAttribute("alt"));
        //注意点: 和获取元素属性一样
        // oImg.nb = "hfkdahdkfjahkjd";
        // oImg.setAttribute("nb","hzhjiayou");
    //3.如何新增元素属性
    //     let oImg = document.querySelector("img");
        //通过    对象.属性   不能新增新的元素属性
        // oImg.it66 = "itzb";
        //注意点:  setAttribute方法如果属性不存在就是新增,如果存在就是修改
        // oImg.setAttribute("it98898","415943594");

        //4.如何删除元素属性
        let oImg = document.querySelector("img");
        // oImg.alt = "";
        //注意点:  和获取元素属性一样
        oImg.removeAttribute("alt");



操作元素中的内容
    //1.获取元素内容
    //注意点: 1. innerHTML获取的内容包含标签,innerText/textContent获取的内容不包含标签
    // 2.  innerHTML/textContent获取的内容不会去除两端的空格,innerText获取的内容会去除两端的空格
    // let oDiv = document.querySelector("div");
    // console.log(oDiv.innerHTML);
    // console.log(oDiv.innerText);
    // console.log(oDiv.textContent);

    //2.设置元素内容
    //特点: 无论通过inerHTML/innerText/textContent设置内容,新的内容都会覆盖原有的内容
    //区别: 如果通过innerHTML设置数据,数据中包含标签,会转换成标签后再添加
        //  如果通过innerText/textContent设置数据,数据中包含标签不会转换成标签,会当做成一个字符串直接设置
    let oDiv = document.querySelector("div");
    // oDiv.innerHTML = "123";
    // oDiv.innerText ="456";
    // oDiv.textContent = "789";

    // oDiv.innerHTML = "<span>我是span</span>";
    // oDiv.innerText = "<span>我是span</span>";
    // oDiv.textContent = "<span>我是span</span>"
  
 
操作元素样式: 
    //1.设置元素样式
    // let oDiv = document.querySelector("div");
    // oDiv.className = "box";
    //注意点: 过去CSS中通过   -   连接的样式,在js中都是驼峰命名
    //注意点: 通过JS添加的样式都是行内样式,会覆盖掉同名的CSS样式
    // oDiv.style.width = "300px";
    // oDiv.style.height = "300px";
    // oDiv.style.backgroundColor  = "blue";

    //2.获取元素样式

    let oDiv = document.querySelector("div");
    // oDiv.style.width = "300px";
    //注意点: 通过style属性只能获取到行内样式的属性值,不能获取到CSS设置的属性值
    // console.log(oDiv.style.width);
    //注意点: 如果想要获取CSS设置值的属性值必须通过getComputedStyle方法来获取
    //getComputedStyle方法接收一个参数,这个参数就是要获取的元素对象
    //getComputedStyle方法返回一个对象,这个对象中就保存了CSS设置的样式和属性值
    let myStyle = window.getComputedStyle(oDiv);
    console.log(myStyle.width);
    
    

DOM事件: 
   什么是DOM事件: 用户和浏览器之间的交互行为我们就称之为事件,比如点击,移入,/移出
   如何给元素绑定事件: 
      在JavaScript中所有的HTML标签都可以添加事件
      元素.事件名称  =  function(){  };
      当对应事件被触发时候就会自动执行function中的代码
      
     oA.onclick = function () {
        alert("不要进入百度首页");
        //以下代码的含义,用我们添加的事件覆盖掉系统同名的事件
        return false;
    }

    
 
 
 
 
 
 
 
 
