通过CSS来修改样式有什么好处？
  不用记忆哪些属性属于哪个标签，
  当需求变更时，我们不需要修改大量的代码就可以满足我们的需求
  在前端开发中CSS只有一个作用就是用来修改样式
  —规定文字样式的属性
  ——格式：font-style:itaic;       取值：   normal：正常，默认就是正常的   italic：倾斜的
  ——快捷键：   fs      font-style:italic;
                          fsn      font-style: normal;
  —规定文字粗细的属性
  ——格式：font-weight:bold;
  ——单词取值    bold    加粗。   bolder   比加粗还粗。   lighter   细线，默认就是细线
  —— 快捷键：fw   font-weight: ;
                        fwb      font-weight: bold;
                        fwbr     font-weight: bolder;
 数字取值：
 ——100-900之间的整百的数字
 —规定文字大小的属性
 ——格式：font-size:30px;
 单位：px（像素 pixel）
 注意点：通过font-size设置大小一定要带单位，也就是一定要写px
 快捷键：fz:         font-size: ;
               fz30        font-size: 30px;
 —规定文字字体属性
 格式：font-family: "楷体"；
 注意点：1、如果取值是中文，需要用双引号或者单引号括起来
                2、设置的字体必须是用户电脑里已经安装的字体
 ——快捷键：
                     ff          font-family:  ;     
                     
                     
                     
                     
如果设置的字体不存在，那么系统会使用默认的字体来显示----->宋体
——如果如果设置的字体不存在，而我们又不想用默认的字体来显示怎么办?
   可以给字体设置备选方案
   格式：font-family; "字体一"，"备选方案1"，"备选方案2" ，，，，;
——  如果给中文和英文分别单独设置字体，怎么办？
         但凡中文字体，里面都包含了英文
         但凡英文字体，里面都没有包含中文  ，也就是说中文字体可以处理英文而英文字体
         不可以处理中文，
         注意点：如果想给界面中的英文单独设置字体，那么英文的字体必须写在中文的前面
         
         补充：在企业开发中最常见的字体有以下几个
         中文：宋体/黑体/微软雅黑
         英文："Times New Roman"/"Arial"
         还需要知道一点，就是并不是名称是英文就一定是英文字体，因为中文字体其实都有自己的英文名称，所以是不是中文字体主要看能不能处理中文
         宋体：（SimSun）
         黑体：（SimHei）
         微软雅黑：（Microsoft YaHei）   
——缩写格式：
           font: style  weight size family;
例如： font :italic bold 10px "楷体";
注意点：
1、	在这种格式中有的属性可以省略：style可以省略，weight可以省略
2、	在这种缩写格式中style和weight的位置可以交换
3、	这种缩写格式中有的属性是不可以省略的：size不能省略，family不可以省略
4、	size和fam所有属性的最后ily的位置是不可以随便乱放的
size一定要写在family的前面，而且size和family必须写在

文本装饰的属性
格式:text-decoration: underline;
取值:     underline 下划线     line-through   删除线      overline 上划线    none 什么都没有, 最常见的用途就是用于去掉超链接的下划线
快捷键:       td  text-decoration: none;     tdu text-decoration: underline;
            tdl text-decoration: line-through;       tdo text-decoration: overline;
2.文本水平对齐的属性
格式: text-align: right;
取值:    left 左     right 右    center 中
快捷键：    ta text-align: left;    tar text-align: right;    tac text-align: center;
3.文本缩进的属性
格式: text-indent: 2em;
取值: 2em, 其中em是单位, 一个em代表缩进一个文字的宽度
快捷键   ti text-indent:;   ti2e text-indent: 2em;

在CSS中如何通过color属性来修改文字颜色
格式: color: 值;
取值:
1.1英文单词
一般情况下常见的颜色都有对应的英文单词, 但是英文单词能够表达的颜色是有限制的, 也就是说不是所有的颜色都能够通过英文单词来表达
1.2rgb  rgb其实就是三原色, 其中r(red 红色) g(green 绿色) b(blue 蓝色)
格式: rgb(0,0,0)
那么这个格式中的第一个数字就是用来设置三原色的光源元件红色显示的亮度，第二个数字就是用来设置三原色的光源元件绿色显示的亮度
第三个数字就是用来设置三原色的光源元件蓝色显示的亮度
这其中的每一个数字它的取值是0-255之前, 0代表不发光, 255代表发光, 值越大就越亮   红色: rgb(255,0,0);   绿色: rgb(0,255,0);
蓝色: rgb(0,0,255);   黑色: rgb(0,0,0);   白色: rgb(255,255,255);
在前端开发中其实并不常用黑色。只要让红色/绿色/蓝色的值都一样就是灰色，而且如果这三个值越小那么就越偏黑色, 越大就越偏白色
例如: color: rgb(200,200,200);
1.3rgba   rgba中的rgb和前面讲解的一样, 只不过多了一个a
那么这个a呢代表透明度, 取值是0-1, 取值越小就越透明   例如: color: rgba(255,0,0,0.2);
1.4十六进制   在前端开发中通过十六进制来表示颜色, 其实本质就是RGB
十六进制中是通过每两位表示一个颜色
例如: #FFEE00 FF表示R EE表示G 00表示B
1.5十六进制缩写    在CSS中只要十六进制的颜色每两位的值都是一样的, 那么就可以简写为一位
例如:    #FFEE00 == #FE0
注意点:   1.如果当前颜色对应的两位数字不一样, 那么就不能简写    #123456;
2.如果两位相同的数字不是属于同一个颜色的, 也不能简写    #122334

1.后代选择器和子元素选择器之间的区别?
1.1  后代选择器使用空格作为连接符号
子元素选择器使用>作为连接符号
1.2  后代选择器会选中指定标签中, 所有的特定后代标签, 也就是会选中儿子/孙子..., 只要是被放到指定标签中的特定标签都会被选中
子元素选择器只会选中指定标签中, 所有的特定的直接标签, 也就是只会选中特定的儿子标签
2.后代选择器和子元素选择器之间的共同点
2.1  后代选择器和子元素选择器都可以使用标签名称/id名称/class名称来作为选择器
2.2   后代选择器和子元素选择器都可以通过各自的连接符号一直延续下去
选择器1>选择器2>选择器3>选择器4{}
3.在企业开发中如何选择
如果想选中指定标签中的所有特定的标签, 那么就使用后代选择器
如果只想选中指定标签中的所有特定儿子标签, 那么就使用子元素选择器

1.什么是交集选择器?
作用: 给所有选择器选中的标签中, 相交的那部分标签设置属性

格式:
选择器1选择器2{
    属性: 值;
}
注意点:
1.选择器和选择器之间没有任何的连接符号
2.选择器可以使用标签名称/id名称/class名称
3.交集选择器仅仅作为了解, 企业开发中用的并不多
并集选择器，作用：给所有选择器选中的标签设置属性。
格式：     选择器1，选择器2{
                        属性：值；
                       }
 注意点：并集选择器必须使用，来连接。选择器可以使用标签名称/id名称/class名称                  

兄弟选择器
相邻兄弟选择器  CSS2里面推出的，
格式：
       选择器1+选择器2{
                      属性：值;
                      }
注意点：相邻兄弟选择器只能通过+号来连接，相邻兄弟选择器只能选中紧跟其后的那个标签，不能选中被隔开的标签。
—通用兄弟选择器   CSS3里面推出的
作用：给指定选择器后面的所有选择器选中的所有标签设置属性
格式：
     标签1~标签2{
                属性：值；
                }
注意点：通用兄弟选择器必须用~连接，通用兄弟选择器选中的是指定选择器后面某个选择器选中的所有标签，无论有没有被隔开都会被选中。

CSS3新增的选择器中最具代表性的就是序选择器
1、同级别的第几个
：first-child    选中同级别的的第一个标签     注意点：不区分类型。
：last-child     选中同级别的最后一个标签     注意点：不区分类型。
：nth-child（n）      选中同级别中的第n个标签      注意点：不区分类型。
：nth-last-child（n）   选中同级别中倒数第n个标签   注意点：不区分类型。
：only-child      选中父元素中唯一的元素
同类型的第几个
：first-of-type   选择中同级别中同类型的第一个标签
：last-of-type    选择中同级别中同类型的最后一个标签。
：nth-of-type（n）     选中同级别中同类型的第n个标签
：nth-last-of-type（n）   选中同级别中同类型的倒数第n个标签
：only-of-type     选中父元素中唯一类型的某个标签。

：nth-child（odd）   选中同级别中的所有奇数
：nth-child（even）  选中同级别中的所有偶数
：nth-child（xn+y）  x和y是用户自定义的，而n是一个计数器，从0开始递增（例如：p：nth-child（2n+0）当为0时选择第0个标签
                    但是第0个没有，所以当n为1的时候选中第二个标签 ）

什么是属性选择器？
作用：根据指定的属性名称找到对应的标签，然后设置属性。
[attribute]     作用：根据指定的属性名称找到对应的标签，然后设置属性
例如：        p[id]{
            color: #ff0000;
                   }
[attribute=value]  作用：找到有指定属性，并且属性的取值等于value的标签，然后设置属性，最常见的应用场景
                         就是用于区分input属性
              例如：        p[class=cc]{
                                          color: #666666;
                                          font-size: 50px;
                                       }
                           input[type=password]{}
                           <input type="text" name="" id="">
                           <input type="password" name="" id="">
   
   属性的取值是以什么开头的    (只需掌握CSS3推出的就行CSS2推出的只需了解一下哦~)
   [attribute|=value]   CSS2
   [attribute^=value]   CSS3
   两者之间的区别：
      CSS2中的只能找到value开头，并且value是被-和其他内容隔开的
      CSS3中的只要是以value开头的都可以找到，无论有没有被隔开
   
   属性的取值是以什么结尾的
   [attribute$=value]   CSS3
   
   属性的取值是否包含某个特定的值
   [attribute~=value]   CSS2
   [attribute*=value]   CSS3
   两者之间的区别：
   CSS2中的只能找到独立的单词，也就是包含value，并且value是被空格隔开的
   CSS3中的只要包含value就可以找到
   
   通配符选择器
   作用：给当前界面所有标签设置属性。
   格式：
               *{
                      属性：值；
                }
    注意点：由于通配符选择器设置界面上所有标签的属性，所以在设置之前会遍历所有标签，如果当前界面上标签较多
            那么性能就会比较差，所以在企业开发中一般不会使用通配符选择器。

什么是继承性？    作用：给父元素设置一些属性，子元素也可以使用，这个我们称之为继承性
注意点：   1、并不是所有属性都可以继承，只有以color/font-/text-/line开头的属性才可以继承
          2、在CSS的继承中不仅仅是儿子可以继承，只要是后代都可以继承   
继承性中的特殊性：     a标签的文字颜色和下划线是不能继承的     h标签文字大小是不能继承的
在企业开发中应用的场景：
一般用于设置网页上的一些共性信息，例如网页的文字颜色、字体大小等内容。
格式：body{}

什么是层叠性？      作用：层叠性就是CSS处理冲突的一种能力
注意点： 层叠性只有在多个选择器选中“同一个标签“然后又设置了“相同的属性”，才会发生层叠性                     
CSS全称：    Cascading StyleSheet        cascading（层叠）

什么是优先级？    作用：当多个选择器选中同一个标签，并且给同一个标签设置相同属性时，如何层叠就由优先级来确定
优先级判断的三种方式
是否是直接选中：（间接选中就是指继承）     如果是间接选中，那么就是谁离目标标签近就听谁的
是否是相同的选择器：   如果都是直接选中，并且都是同类型的选择器，那么谁写在后面就听谁的
不同选择器：   如果都是直接选中，并且不是想同类型的选择器，那么就会按照选择器的优先级别来进行层叠
              id>类>标签>通配符>继承>浏览器默认
什么是!important    作用：用于提升某个直接选中标签中的某个属性的优先级的，可以将被指定的属性的优先级提升为最高。
注意点：    important只能用于直接选中，不能用于间接选中  通配符选择器选中的标签也是直接选中的   
           !important只能提升被指定的属性的优先级，其他的属性的优先级不会被提升      !important必须写在属性值的分号前面
           !important前面的感叹号不能省略
什么是优先级权重？      作用:当多个选择器混合在一起使用时，我们可以通过计算权重来判断谁的优先级最高
权重计算规则    首先计算选择器中有多少个id、id多的选择器优先级高  
               如果id的个数一样，那么再看类名的个数，类名个数多的优先级最高
               如果类名的个数一样，那么再看标签名称个数，标签名称个数多的优先级最高
               如果id个数一样，类名个数也一样，标签名称个数也一样，那么就不会往下计算了，那么此时谁写在后面听谁的
               也就是说优先级如果一样，那么谁写在后面听谁的。
注意点：    只有选择器是直接选中标签的才需要计算权重      否则一定会听直接选中的选择器的

什么是div？   作用：一般用于配合CSS完成网页的基本布局
什么是span？  作用：一般用于配合CSS修改网页中的一些局部信息
div和span有什么区别？     div会独占一行，而span不会独占一行    div是一个容器级别的标签而span是文本级别的标签
容器级别的标签和文本级别的标签的区别？    容器级别的标签中可以嵌套其他所有的标签，文本级别的标签中只能嵌套文字/图片/超链接
容器级别的标签:   div h ul dl li dt dd ...
文本级别的标签：  span p buis strong em ins del ...
注意点：  哪些是文本级别的哪些是容器级别的，我们不用去记忆，在企业开发中一般情况下要嵌套一般都是嵌套在div中，或者按照组标签来嵌套

在HTML中HTML将所有的标签分为两类，分别是容器级和文本级  在CSS中CSS也将所有的标签分为两类，分别是块级元素和行内元素
什么是块级元素？什么是行内元素？      块级元素会独占一行 
容器级的标签：   div h ol dl li dt dd ...
文本级的标签：   span p buis strong em ins del ...
块级元素：   p div h ol dl li dt dd 
行内元素：   span buis strong em ins del 
块级元素和行内元素的区别？
块级元素：   独占一行    如果没有设置宽度，那么和父元素一样宽   如果设置了那么按照设置的来显示
行内元素：   不会独占一行    如果没有设置宽度那么默认和内容一样宽   行内元素是不可以设置宽度和高度的
行内块级元素：  为了让元素既能不独占一行又能设置宽度和高度，那么就出现了行内块级元素 
 
如何转换CSS元素的显示模式？    设置元素的display属性
display取值：   block块级     inline 行内    inline-block   行内块级
快捷键：di：   display inline     db：    display：block    dib：    display：inlin-block

如何设置标签的背景颜色？
在CSS中有一个background-color:属性，就是专门用来设置毕标签的背景颜色的
取值：  具体单词   rgb   rgba   十六进制 
快捷键：bc：   background-color:#fff

如何设置背景图片？   在CSS中有一个叫做background-image:url();的属性，就是专门用于设置背景图片的
                   快捷键：bi    background-image: url();
注意点：图片的地址必须放在url()中，图片的地址可以是本地的地址也可以是网络的地址
       如果图片的大小没有标签的大小大，那么会自动在水平和垂直方向上平铺和填充
       如果网页上出现了图片，那么浏览器会再次发送请求获取图片
       
如何控制背景图片的平铺方式？
在CSS中有一个background-repeat属性，就是专门用于控制背景图片的平铺方式的
**  快捷键：bgr   background-repeat: ;
取值： repeat 默认，在水平和垂直都需要平铺    no-repeat  在水平和垂直方向都不需要平铺
      repeat-x  只在水平方向平铺    repeat-y只在垂直方向上平铺
应用场景：可以通过背景图片的平铺来降低图片的大小，提升网页的访问速度

同一个标签可以设置背景颜色和背景图片，如果颜色和图片同时存在，那么图片会覆盖颜色。
如何控制背景图片的位置？ 在CSS中有一个叫做background-position：属性，就是专门用来控制背景图片的位置的
格式：    background-position：水平方向  垂直方向的；    记住一定要写单位也就是一定要写px
**  快捷键：  bp     background-position: 0 0;
取值：  具体的方位名词    水平方向：  left   center   right
                        垂直方向：   top   center    bottom                 
       具体的像素     例如：background-position：100px 200px；
                           记住一定要带单位，记住具体的像素也是可以接收负数的
                           
**  发现快捷键：   按住Ctrl+有>和.的那个键可以把一个标签缩起来，再按一下就可以打开。 

背景属性缩写格式：
           background： 背景颜色   背景图片  平铺方式  关联方式   定位方式 ；
注意点：background属性中，任何一个属性都可以被省略
什么是背景关联方式    默认情况下背景图片会随着滚动条的滚动而滚动，如果不想让背景图片随着滚动条的滚动而滚动，
                    那么我们可以修改背景图片和滚动条的关联方式
如何修改背景关联方式？   在CSS中有一个叫做background-attachment的属性，这个属性专门用来修改关联方式的
       格式：    background-attachment：scrool；
取值：    scroll  默认值，会随着滚动条的滚动而滚动    fixed    不会随着滚动条的滚动而滚动

** 快捷方式小结：            bc    background-color: #fff;
                         bi    background-image: url();
                         bgr    background-repeat: ;
                         bp   background-position: 0 0;
                         ba    background-attachment: ;
                         bg+    background: #fff url() 0 0 no-repeat;
                         div.box     <div class="box"></div>
                         div.box$*3
                                           <div class="box1"></div>
                                           <div class="box2"></div>
                                           <div class="box3"></div>
                                           
背景图片和插入图片的区别?  背景图片仅仅是一个装饰，不会占用位置    背景图片有 定位属性所以可以很方便的控制图片的位置
                         插入图片会占用位置      插入图片没有定位属性，所以控制图片的位置不太方便
                         插入图片的语义比背景图片的语义要强，所以在企业开发中如果你的图片想被搜索引擎收录，那么推荐使用插入图片。
                         
什么是CSS精灵图   CSS精灵图是一种图像合成技术   
CSS精灵图的作用    可以减少请求的次数，以及降低服务器的处理压力
如何使用CSS精灵图   CSS精灵图需要配合背景图片和背景定位来使用
                         
什么是边框？    边框就是环绕在标签宽度和高度周围的线条
边框属性的格式    连写（同时设置四条边的边框）
                   border：边框的宽度   边框的样式   边框的颜色；
快捷键：  bd+border：1px solid #000；
注意点：连写格式中颜色可以省略，省略之后默认颜色为黑色。  
        连写格式中样式不能省略，省略之后就看不到边框了
        连写格式中宽度可以省略，省略之后可以看到边框
连写（分别设置四条边框）
                      border-top：边框的宽度  边框的样式  边框的颜色；
                      border-right：边框的宽度  边框的样式  边框的颜色；
                      border-bottom：边框的宽度  边框的样式  边框的颜色；
                      border-left：边框的宽度  边框的样式  边框的颜色；
快捷键：    bt+      border-top: 1px solid #000;
           br+      border-right: 1px solid #000;
           bb+      border-bottom: 1px solid #000;
           bl+      border-left: 1px solid #000;
连写（分别设置四条边的边框）   
border-width：  上 右 下 左；
border-style：  上 右 下 左；
border-color：  上 右 下 左；   
注意点：     这三个属性的取值是按照顺时针来赋值，也是按照上右下左来赋值，而不是按照生活中的上下左右
            这三个属性取值省略时的规律
                上右下左>上右下>左边的取值和右边的一样
                上右下左>上右>左边的取值和右边一样，上边的取值和左边一样。
                上右下左>上>右下左取值和上边一样

什么是内边距？   边框和内容之间的距离就是内边距 
格式：非连写   padding-top： ；
              padding-right： ；
              padding-bottom： ；
              padding-left： ；
连写：   padding： 上 右 下 左；
这三个属性取值省略时的规律（规律和border属性一样）
                上右下左>上右下>左边的取值和右边的一样
                上右下左>上右>左边的取值和右边一样，上边的取值和左边一样。
                上右下左>上>右下左取值和上边一样
注意点：   给标签设置内边距之后，标签占有的高度和宽度会发生变化
           给标签设置内边距之后，内边距也会有背景颜色

什么是外边距？  标签和标签之间的距离就是外边距
格式：   非连写    margin-top： ；
                  margin-right：  ；
                  margin-bottom：  ；
                  margin-left：   ；
         连写    margin：上 右 下 左；
        这三个属性取值省略时的规律（规律和border属性一样）
                  上右下左>上右下>左边的取值和右边的一样
                  上右下左>上右>左边的取值和右边一样，上边的取值和左边一样。
                  上右下左>上>右下左取值和上边一样
注意点：     外边距的那部分是没有背景颜色的! 
外边距合并现象：  在默认布局的垂直方向上，默认情况下外边距是不会叠加的，会出现合并现象，谁的外边距比较大就听谁的

**快捷键：     div.box${我是span}*3      
                                  <div class="box1">我是span</div>
                                  <div class="box2">我是span</div>
                                  <div class="box3">我是span</div>
                                  （光标要放在最后面按Tab才有用）
                                 
什么是CSS盒子模型？   CSS盒子模型仅仅是一个形象的比喻，HTML中的所有标签都是盒子
结论：    在HTML中所有的标签都可以设置
宽度/高度   ==  指定可以存放内容的区域
内边距    ==  填充物
边框  ==  手机盒子自己
外边框   ==盒子与盒子之间的间隙

内容的宽度和高度
  就是通过标签的width/height属性设置的宽度和高度
元素的宽度和高度
  宽度=左边框+左内边距+width+右内边距+右边框
  高度同理
元素空间宽度和高度
  宽度=左外边距+左外边框+左内边距+width+右内边距+右边框+右外边距
  高度 同理可证

规律:
         1.增加了border之后元素的宽高也会发生变化
         2.如果增加了border之后还想保持元素的宽高, 那么就必须减去内容的宽高

**快捷键：   div.content>div.aside+div.article
                                               <div class="content">
                                               <div class="aside"></div>
                                               <div class="article"></div>
                                               </div>
                                  
box-sizing属性：
这个属性可可以保证我们给盒子新增padding和border之后，盒子元素的宽度和高度不变
box-sizing属性是如何保证增加padding和border之后，盒子元素的宽度和高度不变的    和我们前面学习的原理一样增加padding和
border之后想要保证盒子元素的宽度和高度，那么就必须减去一部分内容的宽度和高度
box-sizing  取值    content-box    元素的宽高=边框+内边距+内容宽高
                    border-box     元素的宽高=width属性

盒子居中和内容居中：
text-align：center；和margin：0 auto；的区别
text-align：center；  作用：设置盒子中存储的文字/图片水平居中
margin：0 auto；作用：让盒子自己水平居中

为什么要清空默认边距（外边距和内边距）
在企业开发中为了个更好的控制盒子的宽度和计算盒子的宽高等，所以在企业开发中编写代码之前第一件事就是清空默认的边距
但是通配符选择器会遍历界面中所有的标签，所以性能不好，不推荐使用

什么是行高？
在CSS中所有的行都有自己的行高
注意点：行高和盒子的高不是一个概念   
规律：   文字在行高中默认是垂直居中的   
        在企业开发中我们经常将盒子的高度和行高设置为一样，那么这样就可以保证一行文字在盒子的高度中是垂直居中的
        简而言之就是：想要一行文字在盒子中垂直居中，那么只要设置这行文字的行高等于盒子的高度即可，  height=line-height
在企业开发中如果一个盒子中有多行文字，那么我们就不能使用设置行高等于盒子的高度来实现让文字垂直居中只能通过设置padding来让文字居中
例如                 padding-top：30；  
                     padding-bottom：30； 
                     line-height：20px；

注意点：在企业开发中中，如果一个盒子中存储的是文字 ，那么一般情况下我们会以盒子左边的内边距为基准，不会以右边的内边距为基准，因为右边的内边距有误差，
       右边的内边距从何而来？因为右边如果放不下一个文字，那么文字就会换行显示，所以文字和内边距之间的距离就有了误差
        顶部的内边距并不是边框到文字顶部的距离，而是边框到行高顶部的距离

什么是网页布局方式？
网页布局方式其实就是指浏览器是如何对网页中的元素进行排版的
标准流（文档流/普通流）排版方式
        其实浏览器默认的排版方式就是标准流的排版方式，在CSS中将元素分为三类，分别是块级元素/行内元素/行内块级元素
        在标准流中有俩种排版方式，一种是垂直排版，一种是水平排版，
              垂直排版，如果元素是块级元素，那么就会使用垂直排版
              水平排版，如果元素是行内元素/行内块级元素，那么就会水平排版
              
浮动流排版方式：
  浮动流排版方式是一种“半脱离标准流”的排版方式，浮动流只有一种排版方式，就是水平排版。它只能设置某个元素左对齐或者右对齐
注意点：    浮动流中没有居中对齐，也就是说没有center这个取值，
           在浮动流当中是不可以设置margin： 0 auto;  的
特点：在浮动流中是不区分块级元素/行内元素/行内块级元素的无论是块级元素/行内元素/行内块级元素都可以水平排版
      在浮动流中无论是块级元素/行内元素/行内块级元素都可以设置宽高
      综上所述，浮动流中的元素和标准流中的行内块级元素很像

什么是浮动元素脱标？
脱标：脱离标准流
当某一个元素浮动之后，那么这个元素看上去就像从标准流中删除了一样，这就是浮动元素脱标
浮动元素脱标之后会有什么影响？
如果前面一个元素脱标了，而后面一个元素没有浮动，那么这个时候前面一个元素就会盖住后面的一个元素
      
浮动元素排序规则
  相同方向上的浮动元素，先浮动的元素会显示在前面，后浮动的元素会显示在后面
  不同方向上的浮动元素，左浮会找左浮，右浮会找右浮
  浮动元素浮动之后的位置，由浮动元素浮动前在标准流中位置来确定。

浮动元素贴靠现象：
   当父元素不足够宽的时候，他就会从最后一个浮动开始往前贴靠，他会找到以前贴靠的元素前面的一个元素上面，如果贴靠可以满足宽度，那么就会贴靠在那，不然再往前面找元素贴靠，直到能够完整显示为止，如果还是不能直到找到父元素的边框上为止，如果父元素还不能贴靠的话，那只能保持那个状态了
   
在企业开发中什么时候用标准流什么时候用浮动流？
    垂直方向使用标准流，水平方向使用浮动流
拿到一个很复杂的界面如何入手？
    从上至下布局 ；从外向内布局；水平方向可以先划分为一左一右，再对左边或者右边进行进一步布局

浮动元素高度问题：
  在标准流中内容的高度可以撑起父元素的高度
  在浮动流中浮动的元素是不可以撑起父元素的高度的

清除浮动方式一 ：
     给前面一个父元素设置高度
注意点：在企业开发中，我们能不写高度就把不写高度所以这种方式用的很少

清楚浮动的方式二：
    给后面的盒子添加clear属性
clear属性取值：                         (他可以让下面的元素不找左浮动或者左浮动元素不会去找上一个盒子，让他处于第二行)
    none：默认取值，按照浮动元素的排序规则来排序（左浮动找左浮动，右浮动找右浮动）
    left：不要找前面的左浮动元素
    right：不要找前面的右浮动元素
    both：不要找前面的左浮动元素和右浮动元素
注意点： 当我们给某个元素添加clear属性之后，那么这个属性的margin属性就会失效

清除浮动的三种方式：
隔墙法：
         外墙法   在两个盒子中间添加一个额外的块级元素，并且给这个额外的块级元素设置clear:both;属性
         注意点：外墙法他可以让第二个盒子使用margin-top属性
                外墙法不可以让第一个盒子使用margin-bottom属性
         内墙法    在第一个盒子所有子元素最后添加一个额外的块级元素
                   给这个额外添加的块级元素设置clear: both;属性
         注意点：内墙法可以让第二个盒子使用margin-top属性
                内墙法可以让第一个盒子使用margin-bottom属性
外墙法和内墙法区别？
外墙法不能撑起第一个盒子的高度，而内墙法可以撑起第一个盒子的高度
在企业开发中不常用隔墙法来清除浮动

什么是伪元素选择器？
伪元素选择器作用就是给指定标签 内容添加一个子元素或者给指定标签的内容后面添加一个子元素
格式：
标签名称：：before{
       属性名称：值；
       }
（给指定标签的内容前面添加一个子元素）
标签名称：：after{
        属性名称：值；
}
（给指定标签内容后面添加一个子元素）

因为IE6不支持伪元素选择器所以要添加一行代码：
        .box1{
            /*兼容IE6*/
            *zoom:1;
        }
        
overflow : hidden;
作用：  可以将超出标签范围的内容剪掉；
        可以清除浮动 
        可以通过overflow：hidden；让里面盒子设置margin-top属性之后，外面的盒子不被顶下来。
清除浮动：
        .box1{
            background-color: #f00;
            overflow: hidden;
            /*margin-bottom: 10px;*/
            *zoom: 1;
        }         （注意点：如果是IE6需要添加*zoom：1；才能够兼容哦）
        
今天写了一天的网易云注册界面但是还是没有做好，出现了bug，在复制粘贴 input和select所在的div时，右边的图片会错位，导致排版错误，明天或者今天看一下 能不能修改一下这个bug

在企业开发中想让多个盒子的顶部对齐，我们可以让多个盒子同时浮动

在开发中得到的经验：
                  一、记得要写适当的注释（方便自己和别人阅读代码）；
                  二、在body里面可以清空默认边距，再清空默认样式，再修改 整个界面的文字信息。

定位流：
1、相对定位
2、绝对定位
3、固态定位
4、静态定位

什么是相对定位？
相对定位就是相对于自己以前在标准流中的位置来移动
相对定位注意点：
1、相对定位是不脱离标准流的，会继续在标准流中占用一份空间
2、在相对定位中同一个方向上的属性只能使用一个
3、由于相对定位是不脱离标准流的，所以在相对定位中，是区分块级元素/行内元素/行内块级元素的
4、由于相对定位是不脱离标准流的，并且相对定位的元素会占用标准流中的位置，所以当给相对定位的元素设置margin/padding属性的时候会影响到标准流的布局。
  相对定位的应用场景
1、用于对元素进行微调
2、配合后面学习的绝对定位来使用

什么是绝对定位？
绝对定位就是相对于body来进行定位的
绝对定位注意点
绝对定位的元素是脱离标准流的
绝对定位的元素 是不区分块级元素/行内元素/行内块级元素的

规律：
1、默认情况下所有的绝对定位的元素，无论有没有祖先元素，都会以body作为参考点
2、如果一个绝对定位的元素有祖先元素，并且祖先元素也是定位流，那么这个绝对定位元素就会以定位流的那个祖先元素作为参考点。  （只要这个绝对定位元素的祖先元素都可以；指的定位流是指绝对定位/相对定位/固定定位；定位流中只有静态定位不行）
3、如果一个绝对定位的元素有祖先元素，并且祖先元素也是定位流，而且祖先元素中有多个元素都是定位流
那么这个绝对定位元素会以离他最近的那个定位流的祖先为参考点

注意点：（重要！！）
  1、如果一个绝对定位元素是以body作为参考点，那么其实是以网页首屏的宽度和高度作为参考点，而不是以整个网页的宽度和高度作为参考点
  2、绝对定位元素会忽略祖先元素的padding
  
相对定位的弊端：
  相对定位不会脱离标准流，会继续在标准流中占用一份空间，所以不利于布局界面
绝对定位的弊端：
  默认情况下 绝对定位的元素会以body作为参考点所以会随着浏览器的宽度高度的变化而变化。
子绝父相
  子元素用绝对定位，父元素用相对定位
  
如何让绝对定位的元素水平居中
只需要设置绝对定位元素的left：50%；然后再设置绝对定位元素的margin-left：-元素宽度的一半；

什么是固定定位？
固定定位和前面学的背景关联方式很像，背景定位可以让背景图片不随着滚动条的滚动而滚动，
而固定定位可以让某个盒子不随着滚动条的滚动而滚动
注意点：
1、固定定位的元素是脱离标准流的，不会占用标准流中的空间
2、固定定位和绝对定位一样不区分行内/块级/行内块级元素

什么是z-index属性？
默认情况下所有的元素都有一个默认的z-index属性，取值是0，z-index属性的作用是专门用于控制定位流
元素的覆盖关系的
1、默认情况下定位流的元素会覆盖标准流的元素
2、默认情况下定位六的元素后面编写的会覆盖前面编写的
3、如果定位六的元素设置了z-index属性，那么谁的z-index属性就比较大，谁就显示在上面
注意点：
1、从父现象
2、如果两个元素的父元素都没有设置z-index属性，那么谁的z-index属性比较大就显示在上面
2.1如果两个元素的父元素设置了z-index属性，那么子元素的z-index属性就会失效，也就是说谁的父元素z-index属性比较大谁就会显示在上面



a标签伪类选择器
  通过我们的观察发现a标签存在一定的状态
  1、默认状态，从未被访问过
  2、被访问过的状态
  3、鼠标长按的状态
  4、鼠标悬停在a标签上的状态
什么是a标签的伪类选择器？
  a标签的伪类选择器是专门用来修改a标签不同状态下的样式的
格式
  ：link  修改从未被访问过状态下的样式
  ：visited  修改被访问过的状态下的样式
  ：active  修改鼠标长按状态下的样式
  ：hover  修改鼠标悬停在a标签上状态下的样式

注意点：
  1、a标签的伪类选择器可以单独出现也可以一起出现。
  2、a标签的伪类选择器如果一起出现那么必须有严格的顺序要求，编写的规律必须严格遵守爱恨原则 love hate
  3、如果默认状态的样式和被访问过状态的样式一样，那么可以缩写
  例如：a{
           color:yellow;
           }

在企业开发中编写a标签的伪类选择器最好写在标签选择器的后面
在企业开发中和a标签盒子相关的属性都写在标签选择器中（显示模式/宽度/高度）
在企业开发中和a标签文字/背景相关的都写在伪类选择器中

过度模块
  hover这个伪类选择器除了可以用在a标签上，还可以用在其他任何标签上面  
过渡三要素：
  1、必须要有属性发生变化
  2、必须告诉系统哪个属性需要执行过渡效果
  3、必须告诉系统过渡效果持续时长
注意点：当多个属性要同时执行过渡效果的时候用逗号隔开即可
  例如：transition-property: width, background-color;
        transition-duration: 5s,5s;
















