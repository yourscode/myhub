**技巧：在企业开发中推荐使用如下的方式让元素居中，
  水平居中： left: 50%;  transform: translateX(-50%);
  垂直居中： top: 50%;  transform: translateY(-50%);
  
  边框图片：
    border-image-source: url("images/border.jpg")
   告诉浏览器那一张图片成为边框，
   注意点：如果通过source指定了哪一张图片作为边框图片，默认情况下会将图片放到边框的四个顶点。
   如果设置了边框图片，那么就不会显示边框颜色，边框图片的优先级大于边框颜色
 border-image-slice: 70 70 70 70 fill;     fill是使中间的图片进行中间填充，他的填充方式和上右下左中间的填充方式一样，
   告诉浏览器如何对指定的边框图片进行切割    其他的部分用来填充在除了四个角以外的地方
 border-image-width: 10px;
   告诉浏览器图片显示的宽度，并不是指定边框的宽度。
   注意点：如果通过border-images-width  指定了边框图片的宽度，那么默认的边框宽度就会失效
 border-image-repeat: stretch;       还有repeat    round  
   告诉浏览器除了边框图片四个角以外的图片如何填充，默认是拉伸 stretch
 border-image-outset: 10px 30px 50px 70px;
   告诉浏览器图片需要向外移动多少
 连写格式；  border-image: 资源地址 切割方式 平铺方式；
            border-image: url("images/border.jpg") 70 fill stretch;

什么是vertical-align？
  设置元素的垂直对齐方式。
vertical-align注意点：
  text-align是设置给需要对齐元素的父元素
  vertical-align是设置给需要对齐那个元素本身
  vertical-align  只对行内元素有效
  
默认情况下是和基线对齐的，vertical-align： baseline;      （基线就是一行文字中最短那个文字的底部）
其他取值还有vertical-align： top；    bottom     text-top    text-bottom    middle    （中线致得是距离基线上面四分之一距离的线）
                       （盒子的顶部）（盒子的底部）  （文字的顶部）  （文字的底部）  （中线）                                                      
 线径渐变：background: linear-gradient(to top,red,black);      使用to然后使用方向关键字由红变黑。
          background: linear-gradient(90deg,red,black);       向90度的方向旋转，由红变黑。
 线径渐变注意点： 
      至少传递两个渐变，至多没有上限。
      默认情况下系统会自动计算纯色的范围，但是我们也可以手动指定：   background:linear-gradient(to right,red 100px,black 200px,green 300px);     除了第一个指定的是纯色的范围其他都是指定渐变色的范围，例如black的两百px指的是从100px红色后，到两百的这段两百px的范围内发生由红色到黑色的渐变，绿色的300px指的是，由黑色渐变到两百结束后，两百到三百px的距离内发生黑色到绿色的渐变。
      
-webkit-background-clip  可以用来将背景剪切为文字的形状，
   注意点：  
      -webkit-background-clip   是一个私有属性不是所有的浏览器都能识别，
      
      -ms代表【ie】内核识别码
      -moz代表火狐【firefox】内核识别码
      -webkit代表谷歌【chrome】/苹果【safari】内核识别码
      -o代表欧盟【opera】内核识别码
渐变色是可以作为背景图片来使用的，可以使用background-position：
background-image: linear-gradient(-45deg,transparent 100px,white 150px,white 180px,transparent 220px);

            background-position: -600px 0;
            background-repeat: no-repeat;     

线性渐变：默认从上至下；可以通过to关键字的方式来修改渐变的方向；可以通过90deg的方式修改渐变的方向；
径向渐变：默认从中心点向四周扩散；可以通过at关键字修改开始渐变的位置；可以通过at 位置的方式修改开始渐变的位置     
线性渐变：可以指定纯色和渐变色的范围
径向渐变：可以指定扩散的范围（注意点：如果需要同时指定扩散的位置和扩散的范围，那么范围必须写在at前面）
  eg:  background: radial-gradient(200px at top right ,green , red);   注意：扩散范围写在扩散位置前面，并且扩散范围后面不加  ,   符号。
  主轴方向：
            flex-direction: row;  从右至左
            flex-direction: row-reverse;   与从右至左反向
            flex-direction: column;   从上至下
            flex-direction: column-reverse;  与从上至下反向
  
  justify-content: ;     属性控制主轴对齐方式  取值有：flex-start  默认取值,从左对齐；  flex-end   从右对齐    ; center 居中对齐 ;    space-between  两端对齐  ;    space-around  环绕对齐 ;

侧轴对齐：  align-itmes： flex-start；
align-items： flex-start； 向上对齐      flex-end 向下对齐     center  居中对齐    baseline 基线对齐（让所有伸缩项中的基线在一条直线上对齐）    stretch 拉伸对齐或者等高对齐（让所有项的高度变为侧轴的高度）
   注意点： 侧轴对比主轴来说没有两端对齐（space-between）和环绕对齐（space-around）
           如果要设置拉伸对齐那么伸缩项不能设置高度，如果设置了高度那么拉伸对齐就会失效
如果在伸缩容器中通过   align-items：   来控制伸缩项的对齐方式，是一次性控制所有伸缩项的对齐方式，如果想单独控制某一个伸缩项在侧轴上面的对齐方式，那么需要将控制对齐方式的属性写到具体的伸缩项中，
  align-items： 写到伸缩容器中/控制所有的伸缩项
  align-self： 写到伸缩项中/控制编写对应代码的那个伸缩项
  align-self： 的取值和align-itmes： 的取值是一样的只不过作用的范围和书写的位置不一样而已
  
  默认情况下如果伸缩容器的一行放不下所有的伸缩项，那么系统会自动等比压缩所有的伸缩项，
  在伸缩容器中有一个叫做flex-wrap属性，专门用来控制放不下是否需要换行的
  默认取值： flex-wrap： nowrap；   不换行；
  wrap 放不下就换行，而不是等比压缩。  wrap-reverse    放不下就换行，以行为单位进行反转
  
  在伸缩容器中有一个叫做align-content： 的属性，是专门用来设置换行后的对齐方式的
  注意点： 只有伸缩项发生了换行这个属性才有效
  felx-start：  换行之后和侧轴的起点对齐，一行接一行
  flex-end:  换行之后和侧轴的终点对齐，将所有收缩项当作一个整体来操作
  center：  换行之后和侧轴的中点对齐
  space-between： 换行之后在侧轴上面两端对齐 
  space-around：  换行之后在侧轴上面环绕对齐
  stretch：  以一行为单位进行拉伸，拉伸的部分以空白填充，保证拉伸之后所有的行加起来能够填满侧轴
  默认情况下每一个伸缩项都有一个order属性，用于决定排序的先后顺序
  默认情况下所有伸缩项的order取值都为0
  我们可以通过修改order属性的取值来实现伸缩项的排序，  排序规则：从小到大排序，越小的显示在越前面，越大的显示在越后面
  
  伸缩项扩展中有一个flex-grow属性，用于控制当前所有伸缩项的宽度综合小于伸缩容器宽度的时候如何扩充自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器
   默认情况下flex-grow的取值是0，表示我们设置的宽度是多少就按照多少来显示，不进行任何的扩充
   注意点： 只有当伸缩项的宽度总和小于伸缩容器的宽度的时候flex-grow这个属性才会生效。
flex-grow扩充公式
  1、利用伸缩容器的宽度  -  所有伸缩项宽度的总和  =  剩余空间
      600px  -  300px  =  300px
  2、利用剩余空间 /所有需要扩充份数的总和  =  每一份的大小
      300px / （1+4+8） = 23.07
  3、利用当前伸缩项的宽度 + 需要的份数的宽度
     第一个伸缩项   =  100px + （23.07 * 1） = 123.07
     第二个伸缩项   =  100px + （23.07 * 4） = 192.28
     第三个伸缩项   =  100px + （23.07 * 8） = 284.56
      
伸缩项缩小
   伸缩项扩展中有一个flex-shrink属性，用于控制当前所有伸缩项的宽度综合大于伸缩容器宽度的时候如何缩小自己，以便于所有伸缩项宽度的总和能够填满整个伸缩容器（默认值为1，表示等比缩小，0表示不缩小）
   默认情况下-shrink的取值是1，表示当所有伸缩项的宽度总和大于伸缩容器的宽度的时候   等比缩小自己
   注意点： 只有所有伸缩项的宽度总和大于伸缩容器宽度的时候flex-shrink这个属性才有效   
flex-shrink扩充公式
1、利用所有伸缩项的宽度总和  - 伸缩容器宽度  = 溢出宽度
900px - 600px = 300px
2、计算权重值
利用每一个伸缩项需要的份数 * 当前伸缩项的宽度 然后再相加
1 * 300 + 4 * 300 + 8 * 300 = 3900
3、计算每一个伸缩项需要缩小到的范围
  溢出的宽度 * 当前伸缩项的宽度  * 当前伸缩项需要的份数 / 权重值
  300 * 300 * 1 / 3900 = 23.07
  第一个伸缩项的宽度 = 300 -23.07  = 276.9

注意点：
1、如果没有指定flex-grow属性或者flex-grow： 的值是0，那么当前的伸缩项不会被填充
2、如果flex-shrink的值是0，那么当前的伸缩项不会被缩小
3、前面所写的注释都是说宽度扩充或者宽度缩小，但是这种说法是不严谨的也有可能是高度，到底是宽度还是高度由主轴决定
扩充和缩小的是主轴方向上的值

伸缩项的宽度： 在伸缩布局中可以通过flex-basis属性设置伸缩项的宽度，只有在伸缩布局中flex-basis才有效，并且优先级大于width
  flex-basis： 100px；

伸缩项属性缩小格式
  flex: 扩充 缩小 宽度 ；    eg： flex： 0 1 100px；


**以后不用去w3cschool里面找资料了直接去MDN里面找
**解决光标变成方方块状，按一下insert键就行
##flex: 1;  =   flex-grow: 1;  +   flex-shrink: 1;   +   flex-basis: 0;


  
      
      
      
      
      
  
  
